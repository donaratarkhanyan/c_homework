1: Array Sum
Write a program that calculates and prints the sum of all elements in a given integer array.

#include <iostream>
void scan(int*, int);
void print(int*, int);
int sum(int*, int);

int main()
{
	int size = 0;
	std::cout << "Enter the array size: ";
	std::cin >> size;
	int* arr = new int[size];
	std::cout << " Array elements: ";
	scan(arr, size);
	print(arr, size);
	int x = sum(arr, size);
	std::cout <<"Elements sum = " << x << std::endl;
	delete[] arr;
	return 0;
}
void scan(int* arr, int size){
	for(int i = 0; i < size; ++i){
		arr[i] = rand()%10;
	}
}

void print(int* arr, int size){
	for(int i = 0; i < size; ++i){
		std::cout << arr[i] << " ";
	}
	std::cout << std::endl;
}

int sum(int* arr, int size){
	int sum = 0;
	for(int i = 0; i < size; ++i){
		sum += arr[i];
	}
	return sum;
}

2: Array Average
Create a program that calculates and prints the average (mean) of the elements in a given integer array.

#include <iostream>
void scan(int*, int);
void print(int*, int);
int avg(int*, int);

int main()
{
	int size = 0;
	std::cout << "Enter the array size: ";
	std::cin >> size;
	int* arr = new int[size];
	std::cout << " Array elements: ";
	scan(arr, size);
	print(arr, size);
	int x = avg(arr, size);
	std::cout <<"Elements average = " << x << std::endl;
	delete[] arr;
	return 0;
}
void scan(int* arr, int size){
	for(int i = 0; i < size; ++i){
		arr[i] = rand()%10;
	}
}

void print(int* arr, int size){
	for(int i = 0; i < size; ++i){
		std::cout << arr[i] << " ";
	}
	std::cout << std::endl;
}

int avg(int* arr, int size){
	int sum = 0;
	int avg = 0;
	for(int i = 0; i < size; ++i){
		sum += arr[i];
		avg = sum / size;
	}
	return avg;
}

3: Array Maximum Value
Write a program that finds and prints the maximum value in an integer array.

#include <iostream>
void scan(int*, int);
void print(int*, int);
int max(int*, int);

int main()
{
	int size = 0;
	std::cout << "Enter the array size: ";
	std::cin >> size;
	int* arr = new int[size];
	std::cout << " Array elements: ";
	scan(arr, size);
	print(arr, size);
	int x = max(arr, size);
	std::cout <<"Array max = " << x << std::endl;
	delete[] arr;
	return 0;
}
void scan(int* arr, int size){
	for(int i = 0; i < size; ++i){
		arr[i] = rand()%10;
	}
}

void print(int* arr, int size){
	for(int i = 0; i < size; ++i){
		std::cout << arr[i] << " ";
	}
	std::cout << std::endl;
}

int max(int* arr, int size){
	int max = arr[0];
	for(int i = 0; i < size; ++i){
		if(arr[i] > max){
			max = arr[i];
		}
	}
	return max;
}

4: Array Minimum Value
Develop a program that finds and prints the minimum value in an integer array.

#include <iostream>
void scan(int*, int);
void print(int*, int);
int min(int*, int);

int main()
{
	int size = 0;
	std::cout << "Enter the array size: ";
	std::cin >> size;
	int* arr = new int[size];
	std::cout << " Array elements: ";
	scan(arr, size);
	print(arr, size);
	int x = min(arr, size);
	std::cout <<"Array min = " << x << std::endl;
	delete[] arr;
	return 0;
}
void scan(int* arr, int size){
	for(int i = 0; i < size; ++i){
		arr[i] = rand()%10;
	}
}

void print(int* arr, int size){
	for(int i = 0; i < size; ++i){
		std::cout << arr[i] << " ";
	}
	std::cout << std::endl;
}

int min(int* arr, int size){
	int min = arr[0];
	for(int i = 0; i < size; ++i){
		if(arr[i] < min){
			min = arr[i];
		}
	}
	return min;
}

5: Array Search
Implement a program that searches for a specific integer value in an array. If the value is found, print its index; otherwise, indicate that the value is not in the array.

#include <iostream>
void scan(int*, int);
void print(int*, int);
void find(int*, int, int);

int main()
{
	int size = 0;
	std::cout << "Enter the array size: ";
	std::cin >> size;
	int* arr = new int [size];
	scan(arr, size);
	print(arr, size);
	int num = 0;
	std::cout << "Enter the number that you want to search for: ";
	std::cin >> num;
	find(arr, size, num);

	delete[] arr;
	return 0;

}

void scan(int* arr, int size){
	for(int i = 0; i < size; ++i){
		arr[i] = rand()%10;
	}
}

void print(int* arr, int size){
	for(int i = 0; i < size; ++i){
		std::cout << arr[i] << " ";
	}
	std::cout << std::endl;
}

void find(int* arr, int size, int x){
	bool b;
	for(int i = 0; i < size; ++i){
		if(arr[i] == x){
			std::cout << "Number " << x << " found at index " << i << std::endl;
            	b = true;
        	}
    	}

   	if (!b) {
        	std::cout << "Number " << x << " not found in the array." << std::endl;
	}
}

6: Array Sorting
Write a program that sorts the elements of an integer array in ascending order using a common sorting algorithm selection sort. Print the sorted array.
#include <iostream>
void scan(int*, int);
void print(int*, int);
void selection(int*, int);

int main()
{
	int size = 0;
	std::cout << "Enter the array size: ";
	std::cin >> size;
	int* arr = new int [size];
	scan(arr, size);
	print(arr, size);
	selection(arr, size);
	print(arr, size);	
	delete[] arr;

	return 0;
}

void scan(int* arr, int size){
	for(int i = 0; i < size; i++){
		arr[i] = rand()%10;
	}
}

void print(int* arr, int size){
	for(int i = 0; i < size; ++i){
		std::cout << arr[i] << " ";
	}
	std::cout << std::endl;
}

void selection(int* arr, int size){
	for(int i = 0; i < size; ++i){
		for(int j = i + 1; j < size; ++j){
			if(arr[i] < arr[j]){
				std::swap(arr[i], arr[j]);
			}
		}
	}
}

7: Array Reversal
Create a program that reverses the elements of an integer array and prints the reversed array.
#include <iostream> 
void scan(int*, int); 
void print(int*, int); 
void reverse(int*, int); 
 
int main() 
{ 
 int size = 0; 
 std::cout << "Enter the array size: "; 
 std::cin >> size; 
 int* arr = new int [size]; 
 scan(arr, size); 
 print(arr, size); 
 reverse(arr, size); 
 std::cout << "Reverse array! " << std::endl; 
 print(arr, size); 
delete[] arr;
 
} 
 
void scan(int* arr, int size){ 
 for(int i = 0; i < size; ++i){ 
  arr[i] = rand()%10; 
 } 
} 
 
void print(int* arr, int size){ 
 for(int i = 0; i < size; ++i){ 
  std::cout << arr[i] << " "; 
 } 
 std::cout << std::endl; 
} 
    
void reverse(int* arr, int size){ 
 int begin = 0;  
 int end = size - 1;  
while(begin < end){ 
  int tmp = arr[begin]; 
  arr[begin] = arr[end]; 
  arr[end] = tmp; 
 
 ++begin; 
 --end; 
 } 
}

8: Array Duplication Check
Develop a program that checks if there are any duplicate values in an integer array. Print a message indicating whether duplicates exist or not.
#include <iostream>

void scan(int*, int);
void print(int*, int);
bool arr_check(int*, int);

int main()
{
        int size = 0;
        std::cout << "Enter the array size: ";
        std::cin >> size;
        int* arr = new int [size];
        scan(arr, size);
        print(arr, size);
        if(arr_check(arr, size)){
        	std::cout << "Duplicates exist in the array." << std::endl;
    	} else {
        	std::cout << "No duplicates found in the array." << std::endl;
    	}
        delete[] arr;
}

void scan(int* arr, int size){
        for(int i = 0; i < size; ++i){
                std::cout << "Enter the array elements: ";
		std::cin >> arr[i];
        }
}

void print(int* arr, int size){
        for(int i = 0; i < size; ++i){
                std::cout << arr[i] << " ";
        }
        std::cout << std::endl;
}

bool arr_check(int* arr, int size){
	for(int i = 0; i < size; i++){
		for(int j = i + 1; j < size; ++j){
			if(arr[i] == arr[j]){
				return true;
			}
		}
	}
	return false;
}

Problem 12: Second Largest Element
Create a program that finds and prints the second largest element in an integer array.
#include <iostream> 
void scan(int*, int); 
void print(int*, int); 
int max_second(int*, int); 
 
int main(){ 
 int size = 0; 
 std::cout << "enter the array size: "; 
 std::cin >> size; 
 int* arr = new int[size]; 
 scan(arr, size); 
 print(arr, size); 
 int result = max_second(arr, size); 
 std::cout << "Secont maximum element in array = " << result << std::endl; 
 
 delete[] arr; 
 return 0; 
 
} 
 
void scan(int* arr, int size){ 
        for(int i = 0; i < size; ++i){ 
        arr[i] = rand()%10; 
        } 
} 
 
void print(int* arr, int size){ 
        for(int i = 0; i < size; ++i){ 
                std::cout << arr[i] << " "; 
        } 
        std::cout << std::endl; 
} 
 
int max_second(int* arr, int size){ 
 int max = arr[0]; 
 int max_2 = arr[0]; 
 for(int i = 0; i < size; ++i){ 
  if(arr[i] > max){ 
   max_2 = max; 
   max = arr[i]; 
  } 
 } 
 return max_2; 
}
13: grel cragir resurcive function ev function pointerov vor dynamic array-i amen elementi hamar kkanchi function ev elementy increment kani;
#include <iostream>
void scan(int*, int);
void print(int*, int);
void foo(int*, int, void(*)(int&));
void inc(int&);

int main()
{
    int size = 0; 
    std::cout << "Enter the array size: ";
    std::cin >> size;
    int* arr = new int[size];
    scan(arr, size);
    print(arr, size);
    foo(arr, size, inc);
    std::cout << "New array! "<< std::endl;
    print(arr, size);
    
    return 0;
}

void scan(int* arr, int size){
    for(int i = 0; i < size; ++i){
        arr[i] = rand()%10;
    }
}

void print(int* arr, int size){
    for(int i = 0; i < size; ++i){
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;
}

void foo(int* arr, int size, void(*f)(int&)){
    if(size < 0){
        return;
    }
    f(arr[size]);
    foo(arr, size - 1, inc);
}

void inc(int& x){
    ++x;
}

14:Recursive Binary Search
#include <iostream>
int b_search(int* arr, int a, int l, int r){
    if(l > r){
        return -1;
    }
    std::cout << arr[l] << " " << arr[r] << std::endl;
    int mid = l + (r - l) / 2;
    if(arr[mid] == a){
        return mid;
    }
    else if(arr[mid] > a){
        return b_search(arr, a, l, mid - 1);
    }
    else{
        return b_search(arr, a, mid + 1, r);
    }
}
int main()
{
    const int size = 7;
    int arr[size] = {2, 3, 5, 6, 7, 8, 9};
    int l = 0;
    int r = size - 1;
    int index = b_search(arr, 3, l, r);
    std::cout << index;
    return 0;
}

15:Matrix Subtraction
Create a program similar to Problem 1 but for matrix subtraction instead of addition.

#include <iostream>
void sub_mats(int mat1[][3], int mat2[][3], int result[][3], int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            result[i][j] = mat1[i][j] - mat2[i][j];
        }
    }
}
int main()
{
    const int size = 3;
    int mat1[size][size] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    int mat2[size][size] = {{9, 8, 7}, {6, 5, 4}, {3, 2, 1}};
    int result[size][size];
    
    sub_mats(mat1, mat2, result, size);
    
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            std::cout << result[i][j] << " ";
        }
        std::cout << std::endl;
    }
    std::cout << std::endl;
    
    return 0;
}
15: Matrix Transposition
Develop a program that transposes a given matrix. Transposing a matrix means swapping rows with columns. Prompt the user to enter a matrix, transpose it, and print the transposed matrix.
#include <iostream>

void new_Matrix(int mat[][3], int new_Mat[][3], int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
           new_Mat[j][i] = mat[i][j];
        }
    }
}
int main() {
    const int size = 3;
    int mat[size][size];
    int new_Mat[size][size];

    std::cout << "Enter the elements of the matrix:" << std::endl;
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            std::cout << "Enter element at position (" << i << ", " << j << "): ";
            std::cin >> mat[i][j];
        }
    }std::cout << std::endl;
    
    std::cout << "MATRIX!!!! " << std::endl;
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            std::cout << mat[i][j] << " ";
        }
        std::cout << std::endl;
    }
    std::cout << std::endl;
    new_Matrix(mat, new_Mat, size);
    std::cout << "Transposed matrix:" << std::endl;
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            std::cout << new_Mat[i][j] << " ";
        }
        std::cout << std::endl;
    }
	return 0;
}

16:Մատրիցային տողերի տեսակավորում
Գրեք C++ ծրագիր, որը տեսակավորում է մատրիցայի տողերը FUNCTION PPOINTER
#include <iostream>

void scan(int**, int, int);
void print(int**, int, int);
void sort(int**, int, int, void (*)(int*, int));
void sort_row(int* mat, int m);

int main()
{
    int n = 0, m = 0;
    std::cout << "Enter the matrix row: ";
    std::cin >> n;
    std::cout << "Enter the matrix column: ";
    std::cin >> m;
    int** mat = new int*[n];
    for(int i = 0; i < n; ++i){
        mat[i] = new int[m];
    }
    scan(mat, n, m);
    print(mat, n, m);
    sort(mat, n, m, sort_row);
    print(mat, n, m);
    
    for(int i = 0; i < n; ++i){
        delete[] mat[i];
    }
    delete[] mat;
    return 0;
}

void scan(int** mat, int n, int m){
    for(int i = 0; i < n; ++i){
        for(int j = 0; j < m; ++j){
            mat[i][j] = rand()%100;
        }
    }
}

void print(int** mat, int n, int m){
    for(int i = 0; i < n; ++i){
        for(int j = 0; j < m; ++j){
           std::cout << mat[i][j] << " ";
        }
        std::cout << std::endl;
    }
    std::cout << std::endl;
}

void sort(int** mat, int n, int m, void (*sort_r)(int*, int)){
    for(int i = 0; i < n; ++i){
        sort_r(mat[i], m);
    }
}

void sort_row(int* mat, int m){
    for(int i = 0; i < m - 1; ++i){
        for(int j = 0; j < m - i - 1; ++j){
            if(mat[j] < mat[j + 1]){
                std::swap(mat[j], mat[j + 1]);
            }
        }
    }
}

1)Grel rekurzive print function
void print( int* arr, int size, int i){
	if(size == i){
		return 0;
	}
	std::cout << arr[i] << " ";
	print(arr, size, ++i);
}

2)recursive function and function pointer, for increase array elements
void inc(int* arr, int size, void(*f)(int&)){
	if(size < 0){
		return 0;
	}
	f(arr[size]);
	inc(arr, size - 1, change);
}
void change(int& x){
	++x;
}
3) NEXT PRIME NUMBER
#include <iostream>
int prime(int num){
for(int i = 0; i <= num / 2; ++i){
	if(num % i == 0){
		returm 0;
	}
}
return 1;
}

int next_prime(int a){
do{
	++a;
}while(!prime(a))
return a;
}

int main() {
    std::cout << "Enter a number: ";
    int number;
    std::cin >> number;
    int x = next_prime(number);
    std::cout << "The next prime number after " << number << " is: " << x << std::endl;
    return 0;
}
4) Strlen implementation 
#iclude <iostream>
size_t strlenn(const char* str) {
    size_t length = 0;
    while (*str != '\0') {
        ++length;
        ++str;
    }
    return length;
}
int main() {
    const char* myString = "Hello, World!";
    size_t length = strlenn(myString);

    std::cout << "Length of the string: " << length << std::endl;

    return 0;
}
