1) Գրեք ծրագիր, որը օգտվողին թույլ կտա մուտքագրել ամբողջ թվային զանգվածի էլեմենտների արժեքները, և տպել դրանցից առավելագույնի արժեքը:
#include <iostream>
int main()
{
    int arr[100];
    int size = 0;

    do {
        std::cout << "enter the array size: ";
        std::cin >> size;
    } while (size < 1 || size > 100);
    
    for (int i = 0; i < size; ++i) {
        std::cout << "Enter the array elemnets: ";
        std::cin >> arr[i];
    }
    
    int max = arr[0];
    for (int i = 0; i < size; ++i) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    std::cout << max;
    return 0;
}
2)Գրեք ծրագիր, որը օգտվողին թույլ կտա մուտքագրել ամբողջ թվային զանգվածի էլեմենտների արժեքները և տպում է առավելագույն արժեքով էլեմենտի ինդեքսը։
#include <iostream>
int main()
{
    int arr[100];
    int size = 0;

    do {
        std::cout << "enter the array size: ";
        std::cin >> size;
    } while (size < 1 || size > 100);
    
    for (int i = 0; i < size; ++i) {
        std::cout << "Enter the array elemnets: ";
        std::cin >> arr[i];
    }
    
    int max = arr[0];
    for (int i = 0; i < size; ++i) {
        if (arr[i] > max) {
            max = arr[i];
            std::cout << "Max element index: " << i;
        }
    }
    return 0;
}
3)Գրեք ծրագիր, որը օգտվողին թույլ կտա մուտքագրել ամբողջ թվային զանգվածի էլեմենտների արժեքները և տպում է էկրանին նվազագույնի արժեքը:
#include <iostream>

int main()
{
    int arr[100];
    int size = 0;

    do {
        std::cout << "enter the array size: ";
        std::cin >> size;
    } while (size < 1 || size > 100);
    
    for (int i = 0; i < size; ++i) {
        std::cout << "Enter the array elemnets: ";
        std::cin >> arr[i];
    }
    
    int min = arr[0];
    for (int i = 0; i < size; ++i) {
        if (arr[i] < min){
            min = arr[i];
        }
    }
    std::cout << min;
    return 0;
}
4)Գրեք ծրագիր, որը օգտվողին թույլ կտա մուտքագրել ամբողջ թվային զանգվածի էլեմենտների արժեքները և տպում է նվազագույն արժեքով էլեմենտի ինդեքսը։
#include <iostream>

int main()
{
    int arr[100];
    int size = 0;

    do {
        std::cout << "enter the array size: ";
        std::cin >> size;
    } while (size < 1 || size > 100);
    
    for (int i = 0; i < size; ++i) {
        std::cout << "Enter the array elemnets: ";
        std::cin >> arr[i];
    }
    
    int min = arr[0];
    for (int i = 0; i < size; ++i) {
        if (arr[i] < min){
            min = arr[i];
            std::cout << "Min element index: " << i;
        }
    }
    
    return 0;
}
5)Գրեք ծրագիր, որը օգտվողին թույլ կտա մուտքագրել ամբողջ թվային զանգվածի էլեմենտների արժեքները և տպում է նվազագույն և առավելագույն արժեքներով էլեմենտների գումարը:
#include <iostream>
int main()
{
    int arr[100];
    int size = 0;

    do {
        std::cout << "enter the array size: ";
        std::cin >> size;
    } while (size < 1 || size > 100);
    
    for (int i = 0; i < size; ++i){
        std::cout << "Enter the array elemnets: ";
        std::cin >> arr[i];
    }
    
    int max = arr[0];
    int min = arr[0];
    for (int i = 0; i < size; ++i){
        if (arr[i] < min) {
            min = arr[i];
        } else if (arr[i] > max){
            max = arr[i];
        }
    }
    int result = max + min;
    std::cout << "MAX + MIN = " << result;
    return 0;
}

6)Զանգվածի բոլոր էլեմենտները փոխարինել այդ էլեմենտի արժեքը բաժանած զանգվածում էլեմենտների քանակի վրա։
#include <iostream>

int main()
{
    double arr[100];
    int size = 0;

    do{
        std::cout << "enter the array size: ";
        std::cin >> size;
    }while(size < 1 || size > 100);
    
    for(int i = 0; i < size; ++i){
        std::cout << "Enter the array elemnets: ";
        std::cin >> arr[i];
    }
    
    for (int i = 0; i < size; ++i) {
        arr[i] /= size;
        std::cout << arr[i] << " ";
    }
    return 0;
}

7)Գրեք ծրագիր,  որը օգտվողին թույլ կտա մուտքագրել նույն չափսի, երկու ամբողջ թվային զանգվածների էլեմենտների արժեքները և տպում է՝ համապատասխանող ինդեքսեներով էլեմնետների արտադրյալը էկրանին:
#include <iostream>

int main()
{
    const int size = 3;
    int arr1[size];
    int arr2[size];
    
    for(int i = 0; i < size; ++i){
        std::cout << "Enter the first array elemnets: ";
        std::cin >> arr1[i];
    }
    for(int i = 0; i < size; ++i){
        std::cout << "Enter the second array elemnets: ";
        std::cin >> arr2[i];
    }
    
    for (int i = 0; i < size; ++i) {
        std::cout << "mul = " << arr1[i] * arr2[i] << std::endl;
    }
    
    return 0;
}

8) array-i MIN u MAX mijin tvabanakan
#include <iostream>

int main()
{
    int arr[100];
    int size = 0;

    do {
        std::cout << "enter the array size: ";
        std::cin >> size;
    } while (size < 1 || size > 100);
    
    for (int i = 0; i < size; ++i){
        std::cout << "Enter the array elemnets: ";
        std::cin >> arr[i];
    }
    
    int max = arr[0];
    int min = arr[0];
    for (int i = 0; i < size; ++i){
        if (arr[i] < min) {
            min = arr[i];
        } else if (arr[i] > max){
            max = arr[i];
        }
    }
    double result = (double)(max + min) / 2;// double result stanalu hamar petq e cast anel doublei
    std::cout << "mijin tvabanakany = " << result;
    return 0;
}

9) Գրեք ծրագիր,  որը օգտվողին թույլ կտա մուտքագրել char-երի զանգված և դուրս կբերի բոլոր թվերը:
#include <iostream>
int main()
{
    char str[] = "shd5252fgx";
    
    int j = 0;// nayum e arajin tarin i-n el e nayum arajin tarin ete amen handipox tarry tar e j++ enq anum 
    for (int i = 0; str[i]; ++i){ // str[i] != '\0'; '\0'-n = e 0; 0n boolean falsen e aysinqn str[i] = 0 nuyn str[i]
        if ((str[i] >= 'a' && str[j] <= 'z')||(str[i] <= 'A' && str[i] >= 'Z')){
            str[j] = str[i];
            ++j;
        }
    }
    str[j] = '\0';
    std::cout << str;
    
    return 0;
}

10) Գրեք ծրագիր,  որը օգտվողին թույլ կտա մուտքագրել char-երի զանգված և տողը վերածում է մեծատառի։
#include <iostream>
int main()
{
    char str[] = "shdfgx";
    for (int i = 0; str[i]; ++i){ // str[i] != '\0'; '\0'-n = e 0; 0n boolean falsen e aysinqn str[i] = 0 nuyn str[i]
        if (str[i] >= 'a' && str[i] <= 'z'){
            str[i] -= 32;
        }
    }
    std::cout << str;
    
    return 0;
}
11)Գրել ծրագիր, որը ստանում է ամբողջ թվային զանգված և թիվ։ Եթե զանգվածում առկա է տրված թիվը տպել YES, հակառակ դեպքում տպել NO։
#include <iostream>
int main()
{
    int arr[100];
    int size = 0;

    do {
        std::cout << "enter the array size: ";
        std::cin >> size;
    } while (size < 1 || size > 100);
    
    for (int i = 0; i < size; ++i) {
        std::cout << "Enter the array elemnets: ";
        std::cin >> arr[i];
    }
    
    int num = 0;
    std::cout << "enter the find number: ";
    std::cin >> num;
    bool b = false;
    for (int i = 0; i < size; ++i) {
        if (arr[i] == num){
            b = true;
            break;
        }
    }
    
    if (num) {
        std::cout << "YES" << std::endl;
    } else {
        std::cout << "NO" << std::endl;
    }
    return 0;
}

12)Գրեք ծրագիր, որը օգտվողին թույլ կտա մուտքագրել ամբողջ թվային զանգվածի էլեմենտների արժեքները և տպում է այդ զանգավածի էլեմենտների միջին թվաբանականի արժեքը:
#include <iostream>

int main()
{
    int arr[100];
    int size = 0;

    do {
        std::cout << "enter the array size: ";
        std::cin >> size;
    } while (size < 1 || size > 100);
    
    for (int i = 0; i < size; ++i) {
        std::cout << "Enter the array elemnets: ";
        std::cin >> arr[i];
    }
    
    int result = 0;
    int sum = 0;
    for (int i = 0; i < size; ++i) {
        sum += arr[i];
        result = sum / 2;
    }
    std::cout << "the result: " << result;
    return 0;
}
13)Գրեք ծրագիր, որը օգտվողին թույլ կտա մուտքագրել ամբողջ թվային զանգվածի էլեմենտների արժեքերը և տպում է բոլոր էլեմենտների գումարը, արտադրյալը:
#include <iostream>
int main()
{
    int arr[100];
    int size = 0;

    do {
        std::cout << "enter the array size: ";
        std::cin >> size;
    } while (size < 1 || size > 100);
    
    for (int i = 0; i < size; ++i) {
        std::cout << "Enter the array elemnets: ";
        std::cin >> arr[i];
    }
    
    int sum = 0;
    for (int i = 0; i < size; ++i) {
        sum += arr[i];
    }
    
    int mul = 1;
    for (int i = 0; i < size; ++i) {
       mul *= arr[i];
    }
    std::cout << "the sum: " << sum << std::endl;
    std::cout << "the mul: " << mul;
    
    return 0;
}

14)Գրեք ծրագիր,  որը օգտվողին թույլ կտա մուտքագրել զանգվածի էլեմենտների արժեքները և տպում է դրանք հակառակ հերթականությամբ:
#include <iostream>
int main()
{
    int arr[100];
    int size = 0;

    do {
        std::cout << "enter the array size: ";
        std::cin >> size;
    } while (size < 1 || size > 100);
    
    for (int i = 0; i < size; ++i) {
        std::cout << "enter the array elements: ";
        std::cin >> arr[i];
    }
    std::cout << std::endl;
    
    int begin = 0;
    int end = size - 1;
    while(begin < end) {
        int temp = arr[begin];
        arr[begin] = arr[end];
        arr[end] = temp;

    ++begin;
    --end;
    }
    std::cout << "Reversed array: " << std::endl;
    for(int i = 0; i < size; ++i){
        std::cout << arr[i] << " ";
    }
    
    return 0;
}
15)Գրել ֆունկցիա, որը ստանում է զանգված եւ ինդեքսի համար։ Ֆունկցիան հեռացնում է զանգվածի տրված ինդեքսով տարրը եւ վերադարձնում նոր զանգվածը որպես արդյունք։
#include <iostream>

int* remove_index(int*, int, int);

int main() {
    int size = 0;

    do {
        std::cout << "Enter the array size: ";
        std::cin >> size;
    } while (size < 1 || size > 100);

    int* arr = new int[size];
    for (int i = 0; i < size; ++i) {
        std::cout << "Enter the array elements: ";
        std::cin >> arr[i];
    }
    std::cout << std::endl;

    int index = 0;
    std::cout << "Enter the index to remove: ";
    std::cin >> index;

    int* arr_new = remove_index(arr, size, index);
    std::cout << "New array: " << std::endl;
    for (int i = 0; i < size - 1; ++i) {
        std::cout << arr_new[i] << " ";
    }
    std::cout << std::endl;
    
    delete[] arr_new;
    return 0;
}

int* remove_index(int* arr, int size, int index) {
    if (index < 0 || index >= size) {
        return nullptr;
    }
    
    int* arr_new = new int[size - 1];
    for (int i = 0; i < index; ++i) {
        arr_new[i] = arr[i];
    }

    int k = index + 1;
    for (int i = index; i < size - 1; ++i) {
        arr_new[i] = arr[k];
        ++k;
    }

    delete[] arr;
    arr = arr_new;
    arr_new  = nullptr;
    return arr;
}
16)Գրել ծրագիր, որը կտպի զանգվածի կենտ էլեմենտների քանակը։
#include <iostream>

int main(){
    const int size = 7;
    int arr[size] = {1, 4, 6, 5, 2, 1, 9};
    int count;
    for(int i = 0; i < size; ++i){
        if(arr[i] % 2 != 0){
            ++count;
        }
    }
    std::cout << count;
}

17)Գրել ծրագիր, որ տողում փոքրատառերը կդասավորի զանգվածի սկզբում մեծատառերը վերջում;
#include <iostream>

int is_upper(char c){
    return (c >= 'A' && c <= 'Z');
}

int is_lower(char c){
    return (c >= 'a' && c <= 'z');
}
int main()
{
    char str[20];
    std::cout << "enter the string: ";
    std::cin >> str;
    int j = 0; 
    while(!is_upper(str[j])){
        ++j;
    }
    for(int i = j + 1; str[i]; ++i){
        if(is_lower(str[i])){
            std::swap(str[i], str[j]);
            while(!is_upper(str[j])){
                ++j;
            }
        }
    }
    
    std::cout << str;
    return 0;
}
18)Գրեք ծրագիր, որը օգտվողին թույլ կտա մուտքագրել char-երի զանգված և հեռացնում է կրկնվող նիշերը տողից:
#include <iostream> 
 
int len(char* str){ 
    int l = 0; 
    while(str[l]){ 
        ++l; 
    } 
    return l; 
} 
 
int main() 
{ 
    char str[40]; 
    std::cout << "enter the string: "; 
    std::cin >> str; 
    int size = len(str); 
    for(int i = 0; i < size; ++i){ 
        bool repeat = false; 
        for(int j = i + 1; j < size; ++j){ 
            if(str[j] == str[i]){ 
                str[j] = '\0'; 
                repeat = true; 
            } 
        } 
        if(repeat){ 
            str[i] = '\0'; 
        } 
    } 
 
    int j = 0;// nayum e arajin tarin i-n el e nayum arajin tarin ete amen handipox tarry tar e j++ enq anum  
    for (int i = 0; i < size; ++i){  
        if (str[i]){ 
            str[j] = str[i]; 
            ++j; 
        } 
    } 
    str[j] = '\0'; 
    std::cout << str; 
    return 0; 
}

19)Գրեք ծրագիր, որը օգտվողին թույլ կտա մուտքագրել ամբողջ թվային զանգվածի էլեմենտների արժեքները և  կգտնի զանգվածի ամենամեծ և ամենափոքր տարրերի ինդեքսների տարբերությունը:
#include <iostream>

int main()
{
    int arr[100];
    int size = 0;

    do {
        std::cout << "enter the array size: ";
        std::cin >> size;
    } while (size < 1 || size > 100);
    
    for (int i = 0; i < size; ++i){
        std::cout << "Enter the array elemnets: ";
        std::cin >> arr[i];
    }
    
    int max = arr[0];
    int min = arr[0];
    for (int i = 0; i < size; ++i){
        if (arr[i] < min) {
            min = arr[i];
        } else if (arr[i] > max){
            max = arr[i];
        }
    }
    int result = max - min;
    std::cout << "max - min = " << result;
    return 0;
}
20)Գրել ծրագիր, որը լեքսիկոգրաֆիկական կհամեմատի երկու զանգվածներ։
#include <iostream>
int compare(int* arr_1, int s1, int* arr_2, int s2){
    if(s1 > s2)
        return 1;
    if(s1 < s2)
        return -1;
    for(int i = 0; i < s1; ++i){
        if(arr_1[i] > arr_2[i])
            return 1;
        
        if(arr_1[i] < arr_2[i])
            return -1;
    }
    return 0;
}
int main(){
    
    int arr_1[100];
    int s1 = 0;

    do {
        std::cout << "enter the first array size: ";
        std::cin >> s1;
    } while (s1 < 1 || s1 > 100);
    
    for (int i = 0; i < s1; ++i){
        std::cout << "Enter the array elemnets: ";
        std::cin >> arr_1[i];
    }
    
    int arr_2[100];
    int s2 = 0;

    do {
        std::cout << "enter the array size: ";
        std::cin >> s2;
    } while (s2 < 1 || s2 > 100);
    
    for (int i = 0; i < s2; ++i){
        std::cout << "Enter the second array elemnets: ";
        std::cin >> arr_2[i];
    }
    int x = compare(arr_1, s1, arr_2, s2);
    std::cout << x;
}

21)Գրեք ծրագիր, որը ամբողջ թվային զանգվածի բոլոր զույգ էլեմենտները  նույն զանգվածի մեջ՝ կտեղավորի զանգվածի սկզբից, իսկ կենտերը վերջից:
#include <iostream>  
  
int zuyg(int x){  
        return (x % 2 == 0);   
}    
int main(){      
    int arr[100];  
    int size = 0;  
    do {  
        std::cout << "enter the array size: ";  
        std::cin >> size;  
    } while (size < 1 || size > 100);  
      
    for (int i = 0; i < size; ++i){  
        std::cout << "Enter the array elemnets: ";  
        std::cin >> arr[i];  
    }  
      
    int j = 0;   
    while(!zuyg(arr[j])){  
        ++j;  
    }  
    for(int i = j + 1; i < size; ++i){  
        if(!zuyg(arr[i])){  
            std::swap(arr[i], arr[j]);  
            while(!zuyg(arr[j])){  
            ++j;  
            }  
        }  
    }  
      
    for(int i = 0; i < size; ++i){  
        std::cout << arr[i] << " ";  
    }  
}

22)Իրականացնել ֆունկցիա, որը ստանում է ամբողջ թվային պարամետր և վերադարձնում է n-րդ Ֆիբոնաչիի թիվը։
#include <iostream>

int fib(int num){
    if(num <= 1){
        return num;
    }
    int a = 0;
    int b = 1;
    int c = 0;
    for(int i = 2; i <= num; ++i){
        c = a + b;
        a = b;
        b = c;
    }
    return c;
}

int main()
{
    int x = 0;
    std::cout << "enter the index: ";
    std::cin >> x;
    std::cout << fib(x);
    return 0;
}
Իրականացնել recursive ֆունկցիա, որը ստանում է ամբողջ թվային պարամետր և վերադարձնում է n-րդ Ֆիբոնաչիի թիվը։
#include <iostream>
int fib(int n){
    if ((n == 1) || (n == 0)) {
      return n;
    }
    return fib(n - 1) + fib(n - 2);
}
int main()
{
    std::cout << "x = " << fib(6);

    return 0;
}

23)Table of a Number: Գրել recursive ֆունկցիա, որը կտպի տրված թվի բազմապատկման աղյուսակը։
#include <iostream>

void fib(int n, int i){
    if (i > 10) {
      return;
    }
    std::cout << n << " * " << i << " = " << n * i << std::endl;
    fib(n, ++i);
}
int main()
{
     fib(6, 0);
     return 0;
}

Table of a Number: Գրել ֆունկցիա, որը կտպի տրված թվի բազմապատկման աղյուսակը։
#include <iostream>
int main()
{
    int x = 0;
    std::cin >> x;
    for(int i = 0; i <= 10; ++i){
         std::cout << n << " * " << i << " = " << n * i << std::endl;
    }
     return 0;
}
24)Գրել տրված թվի ֆակտորիալը հաշվող իտերատիվ ֆունկցիա։
#include <iostream>
int fact(int num){
    if(num == 0 || num == 1){
        return 1;
    }
    if(num < 0){
        return 0;
    }
    int res = 1;
    while(num != 1){
        res *= num;
        --num;
    }
    return res;
}

int main(){
    int x = 0; 
    std::cout << "Enter the number: ";
    std::cin >> x;
    std::cout << fact(x);
}

Գրել տրված թվի ֆակտորիալը հաշվող recursia ֆունկցիա։
#include <iostream>

int  fak(int n){
    if (n == 0 || n == 1) {
      return 1;
    }
    if (n < 0){
        return 0;
    }
    return n *= fak(n - 1);
}
int main()
{
    std::cout << fak(5);
    return 0;
}
25)Իրականացնել ֆունկցիա, որը ստուգում է՝ թիվը պարզ է, թե ո։ Պարզ է համարվում այն թիվը, որը առանց մնացորդ կարող է բաժանվել ինքը իր վրա և մեկի վրա (մեկը պարզ թիվ չէ)։
#include <iostream>
bool is_prime(int n){
    if (n <= 1){
        return 0;
    } 
    for(int i = 2; i*i <= n; ++i){
        if (n%i == 0){
            return 0;
        }
    }
    return 1;
}
int main(){
    int n = 0; 
    std::cout << "Number: ";
    std::cin >> n;
    if(is_prime(n)){
        std::cout << "Is prime!";
    } else {
        std::cout << "Is not prime!";
    }
}


26)Իրականացնել int տիպի արժեք վերադարձնող ֆունկցիա, որը վերադարձնում է՝ 1, եթե ֆունկցային փոխանցված ամբողջ թիվը կարող է արտահայտվել երկու պարզ թվերի գումարով, հակառակ դեպքում ֆունկցիան կվերադարձնի՝ 0:
#include <iostream>
bool is_prime(int n){
    if (n <= 1){
        return 0;
    } 
    for(int i = 2; i*i <= n; ++i){
        if (n%i == 0){
            return 0;
        }
    }
    return 1;
}
int foo(int n){
    if (n <= 1){
        return -1;
    }
    for(int i = 2; i <= n / 2; ++i){
        if(is_prime(i) && is_prime(n - i)){
            return 1;
        }
    }
    return 0;
}
int main(){
    int n = 0; 
    std::cout << "Number: ";
    std::cin >> n;
    std::cout << foo(n);
}

27)Գրել ռեկուրսիվ ֆունկցիա, որը ստանում է n բնական թիվ և տպում է n-ից 0 թվերը։
#include <iostream>

void print(int n){
    if(n == 0){
        std::cout << 0; 
        return;
    }
    
    std::cout << n << " ";
    int k = n > 0 ? 1 : -1;
    print(n - k);
    
}

int main(){
    int x = 0;
    std::cin >> x;
    print(x);
}

28)Գրել ռեկուրսիվ ֆունկցիա, որը ստանում է n բնական թիվ և տպում է 0-ից n թվերը։
#include <iostream>

void print(int n){
    if(n == 0){
        std::cout << 0 << " "; 
        return;
    }
    
    int k = n > 0 ? 1 : -1;
    print(n - k);
    std::cout << n << " ";
}

int main(){
    int x = 0;
    std::cin >> x;
    print(x);
}

29)Գրել ռեկուրսիվ ֆունկցիա, որը ստանում է ամբողջ թվային զանգված և տպում է զանգվածի էլեմենտները էկրանին։
#include <iostream>
void print_arr(int* arr, int size){
    if(size == 0){
        return;
    }
    std::cout << *arr;
    print_arr(arr + 1, size - 1);
}


int main(){
    const int size = 6;
    int arr[6] = {1, 2, 3, 4, 5, 6};
    print_arr(arr, size);
}

30)Իրականացնել ռեկուրսիվ ֆունկցիա, որն ընդունում է թիվ և վերադարձնում նրա թվանշանների գումարը:
#include <iostream>
int sum(int n){
   if(n == 0){
       return 0;
   }
   return n % 10 + sum(n / 10);
}
int main(){
    int num = 0; 
    std::cin >> num;
    int x = sum(num);
    std::cout << x;
}

31)Իրականացնել ռեկուրսիվ ֆունկցիա, որը հաշվում է երկու թվերի ամենամեծ ընդհանուր բաժանարարը։
#include <iostream>

int  gcd(int a, int b){
    if(b == 0){
        return a;
    }
    
    return gcd(b, a % b);
}    
int main(){
    std::cout << gcd(18, 24);
    return 0;
}

32)Իրականացնել int տիպի արժեք վերադարձնող ֆունկցիա, որը վերադարձնում է՝ 1, եթե ֆունկցային փոխանցված ամբողջ թիվը կարող է արտահայտվել երկու պարզ թվերի գումարով, հակառակ դեպքում ֆունկցիան կվերադարձնի՝ 0:
#include <iostream>
bool is_prime(int n){
    if (n <= 1){
        return 0;
    } 
    for(int i = 2; i*i <= n; ++i){
        if (n%i == 0){
            return 0;
        }
    }
    return 1;
}
int foo(int n){
    if (n < 4){
        return 0;
    }
    for(int i = 2; i <= n / 2; ++i){
        if(is_prime(i) && is_prime(n - i)){
            return 1;
        }
    }
    return 0;
}
int main(){
    int n = 0; 
    std::cout << "Number: ";
    std::cin >> n;
    std::cout << foo(n);
}

33)Իրականացնել բինար որոնման ալգորիթմը զանգվածի համար իտերատիվ տարբերակով։
#include <iosream>
int search(int* arr, int size, int target){
    int l = 0;
    int r = size - 1;
    while(l <= r){
        int mid = l + (r - l) / 2;
        if(arr[mid] == target){
            return mid;
        }
        if(arr[mid] > target){
            r = mid - 1;
        }else{
            l = mid + 1;
        }
    }
    return -1;
}

int main(){
    const int size = 5;
    int arr[size] = {1,3,5,7,8};
    int target = 0; 
    std::cout << "Enter the target element: ";
    std::cin >> target;
    std::cout << search(arr, size, target);
}

34)Իրականացնել ֆունկցիա, որը ունի հետևյալ նախատիպը (prototype)int power (int num, int exp); Ֆունկցիան վերադարձնում է num ամբողջ թվի exp աստիճանի արժեքը։
#include <iostream>
int power(int num, int expp){
    if(expp < 0){
        return 0;
    }
    if(expp == 0){
        return 1;
    }
    if(num == 0 || num == 1){
        return num;
    }
    int k = 1;
    for(int i = 0; i < expp; ++i){
        k *= num;
    }
    return k;
}
int main(){
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    int expp = 0;
    std::cout << "tvi astichan: ";
    std::cin >> expp;
    std::cout << power(num, expp);
    
    return 0;
}

35)Մուտքագրել թիվ, տպել թվի թվանշանները առանձին առանձին էկրանին։ Օրինակ՝ մուտքագրված 5479 թվի համար տպել ‘5’, ‘4’, ‘7’, ‘9’։
#include <iostream>
int power(int num, int expp){
    if(expp < 0){
        return 0;
    }
    if(expp == 0){
        return 1;
    }
    if(num == 0 || num == 1){
        return num;
    }
    int k = 1;
    for(int i = 0; i < expp; ++i){
        k *= num;
    }
    return k;
}
int main(){
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    int expp = 0;
    std::cout << "tvi astichan: ";
    std::cin >> expp;
    std::cout << power(num, expp);
    
    return 0;
}

36)Մուտքագրել թիվ, փոխակերպել թիվը տասնվեցական համակարգի թվի եւ տպել արդյունքը։
#include <iostream>
const char* arg = "0123456789ABCDEF";
void hex(int num, size_t k = 16){//k-n inch lini ayd hamakargy klini
    if(num == 0){
        return;
    }
    hex(num / k);
    std::cout << arg[num % k];
    
}
int main(){
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    hex(num);
    
    return 0;
}

37)Fibonachi rekursiv
#include <iostream>

int fib(int n){
    if (n < 0){
        return -1;
    }
    if (n < 2){
        return n;
    }
    return fib(n - 1) + fib(n - 2);
}
int main()
{
    int x = 0; 
    std::cin >> x;
    std::cout << fib(x);
    
    return 0;
}
38)fibonachi bacasakan indexov tveri hamar
#include <iostream>

int fib(int n){
    if (n < 0){
        return n;
    }
    if (n < 2){
        return n;
    }
    return fib(n - 1) + fib(n - 2);
}

int u_f(int n){
    int tmp = fib(n < 0 ? -n : n);
    if (n < 0 && n % 2 ==0){
        return -tmp;
    }
    return tmp;   
}
int main(){
    std::cout << fib(-4);
}

39)Իրականացնել բինար որոնման ալգորիթմը զանգվածի համար ռեկուրսիվ տարբերակներով։
#include <iostream>
int b_search(int* arr, int a, int l, int r){
    if(l => r){
        return -1;
    }
    std::cout << arr[l] << " " << arr[r] << std::endl;
    int mid = l + (r - l) / 2;
    if(arr[mid] == a){
        return mid;
    }
    else if(arr[mid] > a){
        return b_search(arr, a, l, mid - 1);
    }
    else{
        return b_search(arr, a, mid + 1, r);
    }
}
int main()
{
    const int size = 7;
    int arr[size];
    for(int i = 0; i < size; ++i){
        std::cout << "array: ";
        std::cin >> arr[i];
    }
    int l = 0;
    int r = size - 1;
    int index = b_search(arr, 3, l, r);
    std::cout << index;
    return 0;
}
40)Իրականացնել ռեկուրսիվ ֆունկցիա, որը ստանում է զանգված և վերադարձնում զանգվածի ամենափոքր (ամենամեծ) էլեմենտը։
#include <iostream>

int max(int a, int b){
    if (a > b){
        return a;
    }
    return b;
}

int maxelm(int* arr, int size){
    if (size == 0){
        throw std::invalid_argument("");
    }
    if (size == 1){
        return *arr;
    } 
    return max(*arr, maxelm(arr + 1, size - 1));
}
int main(){
    int arr[5] {1,20,3,4,5};
    std::cout << maxelm(arr, 5);
}
41)Իրականացնել ռեկուրսիվ ֆունկցիա, որը կստանա տող և կվերադարձնի տողի երկարությունը։
#include <iostream>
int len(char* str){
    if (*str == '\0'){
        return 0;
    }
    return 1 + len(str + 1);
}
int main(){
    char str[20] = "Hello";
    std::cout << len(str);
}

42)Իրականացնել ռեկուրսիվ ֆունկցիա, որը ստանում է թիվ և վերադարձնում թվի թվանշանների արտադրյալը։
#include <iostream>
int mul(int n){
   if(n == 0){
       return 1;
   }
   return (n % 10) * mul(n / 10);
}
int main(){
    int num; 
    std::cin >> num;
    int x = mul(num);
    std::cout << x;
}
43)Գրել տրված թվի ֆակտորիալը հաշվող ռեկուրսիվ ֆունկցիա
#include <iostream>
int fact(int n){
   if(n == 0 || n == 1){
       return 1;
   }
   return n * fact(n - 1);
}
int main(){
    int num; 
    std::cin >> num;
    int x = fact(num);
    std::cout << x;
}

44)Իրականացնել ռեկուրսիվ ֆունկցիա, որը ստանում է N թիվ և վերադարձնում այդ թվի երկուական համակարգում ներկայացումը։
#include <iostream>
void bin(int n) {
    if (n <= 0) {
        return;
    }

    bin(n / 2);
    std::cout << n % 2;
}
int main(){
    int num; 
    std::cin >> num;
    bin(num);
}

45)Իրականացնել ռեկուրսիվ ֆունկցիա, որը ստանում է տող և վերադարձնում տողում առաջին հանդիպած մեծատառը։
