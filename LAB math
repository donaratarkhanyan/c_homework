 1)Տրված է բնական թիվ: Արտածել YES, եթե
ա) թվի թվանշանների մեջ կա 3 թվանշան,
բ) թվի թվանշանների մեջ չկա 5 թվանշան,
գ) թվի թվանշանները աճման կարգով են դասավորված,
դ) թվի թվանշանները նվազման կարգով չեն դասավորված,
ե) թվի թվանշանների գումարը մեծ է քսանից,
զ) թվի թվանշանների արտադրյալը փոքր է երեսունից:

#include <iostream>

bool x1(int n){//3 ka
    while(n){
        if(n % 10 == 3){
            return true;
        }
    n /= 10;
    }
    return false;
}

bool x2(int n){///5 chka
    while(n){
        if(n % 10 == 5){
            return false;
        }
    n /= 10;
    }
    return true;
}


bool x3(int n){//achman
    int r = n % 10;
    n /= 10;
    while(n){
        int l = n % 10;
        if(l > r){
            return false;
        }
        r = l;
        n /= 10;
    }
    return true;
}

bool x4(int n){//nvazman
    int r = n % 10;
    n /= 10;
    while(n){
        int l = n % 10;
        if(l < r){
            return false;
        }
        r = l;
        n /= 10;
    }
    return true;
}

bool x5(int n){
    int sum = 0;
    while(n){
        sum += n % 10;
        n /= 10;
    }
    if(sum > 20){
        return true;
    }
    return false;
}

bool x6(int n){
    int mul = 1;
    while(n){
        mul *= n % 10;
        n /= 10;
    }
    if(mul < 30){
        return true;
    }
    return false;
}
int main()
{
    int num = 0;
    std::cout << "Enter the number:";
    std::cin >> num;
    const int size = 6;
    bool (*ptr[size])(int) = {x1, x2, x3, x4, x5, x6};
    for(int i = 0; i < size; ++i){
        if(ptr[i](num)){
            std::cout << "true" << std::endl;
        }
        else{
            std::cout << "false" << std::endl;
        }
    }
    return 0;
}
2)n թվանշան ունեցող բնական թիվը կոչվում է Արմսթրոնգի թիվ, եթե նրա թվանշանների n աստիճանների գումարը հավասար է այդ թվին (օրինակ՝ 153=1^3 +5^3 +3^3 : 
Ներմուծել թիվ, արտածել YES եթե այն հանդիսանում է Արմսթրոնգի թիվ, և NO հակառակ դեպքում։(minchev 10000 armstrong tvery)
#include <iostream>

int count_num(int num){
    int count = 0;
    while(num){
        ++count;
        num /= 10;
    }
    return count;
}

int power(int num, int a){
    int tmp = num;
    for(int i = 1; i < a; ++i){
        tmp *= num;
    }
    return tmp;
}

bool arm(int num){
    if(num > 1 && num < 10){
        return false;
    }
    int tmp = num;
    int sum = 0;
    int count = count_num(num);
    while(tmp){
        sum += power((tmp % 10), count);
        tmp /= 10;
    }
    if(sum == num){
        return true;
    }else{
        return false;
    }    
}

void arm_2(){
    for(int i = 0; i < 10000; ++i){
        if(arm(i)){
            std::cout << i << " " <<  std::endl;
        }
    }
}
int main()
{
    arm_2(); 
    return 0;
}
3)Տրված են երեք բնական թվեր՝ a, b և c։ 
Օգտվելով Պյութագորասի թեորեմից, ստուգել արդյոք նշված երկարություններով կողերով եռանկյունը ուղղանկյուն եռանկյուն է։
#include <iostream>
int sqrtt(int x){
    return x * x;
}
bool triangle(int a, int b, int c){
    if(sqrtt(a) + sqrtt(b) == sqrtt(c)){
        return true;
    }
    if(sqrtt(a) + sqrtt(c) == sqrtt(b)){
        return true;
    }
    if(sqrtt(c) + sqrtt(b) == sqrtt(a)){
        return true;
    }
    return false;
 }
int main()
{
    int a = 0;
    int b = 0; 
    int c = 0;
    std::cout << "Enter the sides of trinagle: ";
    std::cin >> a >> b >> c;
    if(triangle(a, b, c)){
        std::cout << "uxxankyun erankyun e!!" << std::endl;
    }
    else{
        std::cout << "uxxankyun erankyun che!!" << std::endl;
    }
    return 0;
}

4)Գրել ֆունկցիա, որը ստանում է a և b թվերը(որտեղ a-ն ուղղանկյուն եռանկյան դիմացի էջն է, իսկ  b-ն ուղղանկյուն եռանկյան կից էջը) 
հաշվել և վերադարձնել կից էջով և ներքնաձիգով կազմած անկյան սինուսը(sin)
հաշվել և վերադարձնել կից էջով և ներքնաձիգով կազմած անկյան կոսինուսը(cos)
հաշվել և վերադարձնել կից էջով և ներքնաձիգով կազմած անկյան տանգենսը(tg)
հաշվել և վերադարձնել կից էջով և ներքնաձիգով կազմած անկյան կոտանգենսը(ctg).
#include <iostream>

int power(int);
double sqrtt(double, int);
double calculate_sin(int, int);
double calculate_cos(int, int);
double calculate_tg(double, double);
double calculate_ctg(double, double);


int main()
{   
    double x = 1.0;
    int a = 0;
    int b = 0;
    std::cout << "Enter the dimaci side: ";
    std::cin >> a;
    std::cout << "Enter the kic side: ";
    std::cin >> b;
    int c = power(a) + power(b);
    std::cout <<"nerqnadzig = " << sqrtt(x, c) << std::endl;
    int c_2 = sqrtt(x, c);
    
    double sinus = calculate_sin(a, c_2);
    std::cout << "ankyan sin = " << sinus << std::endl;
    
    double cosinus = calculate_cos(b, c_2);
    std::cout << "ankyan cos = " << cosinus << std::endl;
    
    double tanges = calculate_tg(sinus, cosinus);
    std::cout << "ankyan tg = " << tanges << std::endl;
    
    double cotanges = calculate_ctg(cosinus, sinus);
    std::cout << "ankyan ctg = " << cotanges << std::endl;
    
    
    return 0;
}

int power(int num){
    return num * num;
}

double sqrtt(double x, int n){
    for(int i = 1; i < 10; ++i){
        x = (x + (n / x)) / 2;
    }
    return x;
}

double calculate_cos(int b, int c){
    if(c != 0){
        return static_cast<double>(b) / c;
    }
    return 0.0;
}

double calculate_sin(int a, int c){
    if(c != 0){
        return static_cast<double>(a) / c;
    }
    return 0.0;
}

double calculate_tg(double sinus, double cosinus){
    if(cosinus != 0){
        return sinus / cosinus;
    }
    return 0.0;
}

double calculate_ctg(double cosinus, double sinus){
    if(sinus != 0){
        return cosinus / sinus;
    }
    return 0.0;
}

5)artahaytutyan arjeqn e hashvum
#include <iostream>
int fact(int n){
        if(n == 0 || n == 1){
            return n;
        }
        return n *= fact(n - 1);
}
    
double poww(int n, size_t a){
    if(a == 0){
        return 1;
    }
    return n * poww(n, a - 1);
}    

double foo(int i, int x){
    int k = (i & 1) ? -1 : 1;
    return k * (poww(x, i - 1) / fact(3 * i) + poww(2, i + 1));
}

double sum(int n, int x){
    int i = 1;
    double s = 0;
    while(i <= n){
        s += foo(i, x);
        ++i;
    }
    return s;
}
int main()
{
    int num = 0;
    int x = 0;
    std::cout << "Enter the numbers: ";
    std::cin >> num >> x;
    std::cout << sum(num, x);
    return 0;
}
6)Գրել ֆունկցիա, որը որպես արգումենտ կստանա թիվ և կվերադարձնի true, եթե թիվը կատարյալ(perfect) է, հակառակ դեպքում false.
#include <iostream>
bool perfect(int num){
    int sum = 0;
    for(int i = 1; i <= num / 2; ++i){
        if(num % i == 0){
            sum += i;
        }
    }
    return (sum == num);
}

void foo(){
    for(int i = 0; i < 10000; ++i){
        if(perfect(i)){
            std::cout << i << " ";  
        }
    }  
}
int main()
{
    foo();
    return 0;
}

7)Իրականացրե՛ք n-րդ պարզ թիվը գտնելու ֆունկցիա:
#include <iostream>
bool prime(int n){
    if(n < 2){
        return false;
    }
    for(int i = 2; i <= n / 2; ++i){
        if(n % i == 0){
            return false;
        }
    }   
    return true;
}

int find(int n){
    if(n < 1){
        return -1;
    }
    int x = 0;
    int count = 0;
    int tmp = 2;
    while(count < n){
        if(prime(tmp)){
            ++count;
            x = tmp;
        }
        ++tmp;
    }
    return x;
}
int main()
{
    int index = 0;
    std::cout << "Enter the index: ";
    std::cin >> index;
    std::cout << "the number: " << find(index);
    return 0;
}

8)Մուտքագրել N թիվ և հաշվել տրված թվի արմատը՝ sqrt(N)։
#include <iostream>
double sqrtt(double x, int n){
    for(int i = 1; i < 10; ++i){
        x = (x + (n / x)) / 2;
    }
    return x;
}
int main()
{
    double x = 1;
    int n = 0;
    std::cout << "Enter the sqrt: ";
    std::cin >> n;
    std::cout << sqrtt(x, n);
    return 0;
}

9)Տրված է X բնական թիվը։ Իրականացնել ֆունկցիա, որը կհաշվի տրված թվի լոգարիթմը 2 հիմքով։ 

#include <iostream>
#include <cmath>

double foo(int n, double x){
    return pow(((x - 1) / (x + 1)), 2 * n - 1) / (2 * n - 1);
}

double ln_x(double n){
    double sum = 0.0;
    for(int i = 1; i < 20; ++i){
        sum += 2 * foo(i, n);
    }
    return sum;
}

int main()
{
    double n = 0;
    std::cout << "Enter the number: ";
    std::cin >> n;
    std::cout << "Result = " <<ln_x(n);
    
    return 0;
}

10)Տրված է b և a բնական թվեր։ Իրականացնել ֆունկցիա, որը կհաշվի b թվի լոգարիթմը a հիմքով։
#include <iostream>
#include <cmath>

double foo(int n, double x){
    return pow(((x - 1) / (x + 1)), 2 * n - 1) / (2 * n - 1);
}
double ln_x(double n){
    double sum = 0.0;
    for(int i = 1; i < 50; ++i){
        sum += 2 * foo(i, n);
    }
    return sum;
}
int main()
{
    double a = 0;
    double b = 0;
    std::cout << "Enter the a = ";
    std::cin >> a;
    std::cout << "Enter the b = ";
    std::cin >> b;
    std::cout << "Result = " << ln_x(b) / ln_x(a);
   return 0;
}
11)Մուտքագրել երեք բնական թվեր՝ a, b և c։ Հաշվել այդ կողմերով եռանկյան մակերեսը Հերոնի բանաձևով։
Նկարագրել բուլյան ֆունկցիա, որն արգումենտում ստանում է երեք իրական թիվ և վերադարձնում է false, եթե գոյություն չունի տրված կողմերով եռանկյուն: 
Հակառակ դեպքում վերադարձնում է true և վերադարձնում է նաև այդ եռանկյան մակերեսը:
#include <iostream>
bool is_triangle(double, double, double);
double heron(double, double, double);
double sqrtt(double);

int main()
{
    
    double a = 0;
    double b = 0;
    double c = 0;
    std::cout << "Enter triangel side: ";
    std::cin >> a >> b >> c;
    std::cout << "Paragic: " << heron(a, b, c);
    return 0;
}

bool is_triangle(double a, double b, double c){
    if (a < 0 || b < 0 || c < 0){
        return false;
    }
    if (a + b < c || a + c < b || b + c < a){
        return false;
    }
    return true;
}
double heron(double a, double b, double c){
    if (!is_triangle(a, b, c)){
        throw std::invalid_argument("ERRORRRR!!");
    }
    double p =  (a + b + c) / 2;
    double res = sqrtt(p * (p - a) * (p - b) * (p - c));
    return res;
}

double sqrtt(double num){
    double x = 1;
    for(int i = 0; i < 10; ++i){
        x = (x + (num / x)) / 2;
    }
    return x;
}

12)Տրված n դրական ամբողջ թվի համար արտածել 2-ի ամենամեծ աստիճանը, որը չի գերազանցում n-ը։
#include <iostream>
void find(int num){
    int x = 1;
    while(x < num){
        x *= 2;
    }
    x /= 2;
    std::cout << x << std::endl;
}
int main()
{
    int a = 0;
    std::cout << "Enter the number:  ";
    std::cin >> a;
    find(a);

    return 0;
}

13)Մուտքագրել  2 թիվ` n, k և n-չափանի վեկտոր՝ V։ Բազմապատկել տրված վեկտորը k թվով։
#include <iostream>
void change(double* v1, double* v2, int n, double k){
    for(int i = 0; i < n; ++i){
        v2[i] = v1[i] *  k;
    }
}
int main()
{
    double v1[30];
    double v2[30];
    int n = 0; 
    double k = 0.0;
    std::cout << "Enter k: ";
    std::cin >> k;
    do{
        std::cout << "Enter n: ";
        std::cin >> n;
    }while(n < 0 || n >= 30);
    
    for(int i = 0; i < n; ++i){
        std::cout << "Array elements: ";
        std::cin >> v1[i];
    }
    for(int i = 0; i < n; ++i){
        std::cout << v1[i] << " ";
    }
    std::cout << std::endl;
    change(v1, v2, n, k);
    
    std::cout << "New array: ";
    for(int i = 0; i < n; ++i){
        std::cout << v2[i] << " ";
    } 
    return 0;
}
14)Մուտքագրել n թիվ և n-չափանի 2 վեկտորներ՝ V1, V2։ Հաշվել այդ վեկտորների գումարը՝ V1 + V2:
#include <iostream>
void sum(double* v1, double* v2, int n, double* v3){
    for(int i = 0; i < n; ++i){
        v3[i] = v1[i] + v2[i];
    }
}

int main()
{
    double v1[30];
    double v2[30];
    double v3[30];
    int n = 0; 

    do{
        std::cout << "Enter n: ";
        std::cin >> n;
    }while(n < 0 || n >= 30);
    
    std::cout << "First array " << std::endl;
    for(int i = 0; i < n; ++i){
        std::cout << "elements: ";
        std::cin >> v1[i];
    }
    
    std::cout << "Second array " << std::endl;
    for(int i = 0; i < n; ++i){
        std::cout << "elements: ";
        std::cin >> v2[i];
    }
    
    for(int i = 0; i < n; ++i){
        std::cout << v1[i] << " ";
    }
    std::cout << std::endl;
    
    for(int i = 0; i < n; ++i){
        std::cout << v2[i] << " ";
    }
    
    std::cout << std::endl;
    sum(v1, v2, n, v3);
    
    std::cout << "New array: ";
    for(int i = 0; i < n; ++i){
        std::cout << v3[i] << " ";
    }
    
    return 0;
}
15)Մուտքագրել n թիվ և n-չափանի 2 վեկտորներ՝ V1, V2։ Հաշվել այդ վեկտորների սկալյար արտադրյալը՝ V1 * V2:
#include <iostream>

double mul_v(double* v1, double* v2, int n){
    double mul = 0.0;
    for(int i = 0; i < n; ++i){
        mul += v1[i] * v2[i];
    }
    return mul;
}
int main()
{
    double v1[30];
    double v2[30];
    int n = 0; 

    do{
        std::cout << "Enter n: ";
        std::cin >> n;
    }while(n < 0 || n >= 30);
    
    std::cout << "First array " << std::endl;
    for(int i = 0; i < n; ++i){
        std::cout << "elements: ";
        std::cin >> v1[i];
    }
    
    std::cout << "Second array " << std::endl;
    for(int i = 0; i < n; ++i){
        std::cout << "elements: ";
        std::cin >> v2[i];
    }
    
    for(int i = 0; i < n; ++i){
        std::cout << v1[i] << " ";
    }
    std::cout << std::endl;
    
    for(int i = 0; i < n; ++i){
        std::cout << v2[i] << " ";
    }
    
    std::cout << std::endl;
    std::cout << "Result: ";
    std::cout << mul_v(v1, v2, n);
    
    return 0;
}

16)Մուտքագրել n թիվ, և n չափանի V  վեկտոր։ Հաշվել տրված վեկտորի երկարությունը։
#include <iostream>

double power(double x){
    return x * x;
}

double sqrtt(double n) {
    double x = 1.0;
    int end = 10;
    while(end) {
        x = (x + (n / x)) / 2;
        --end;
    }
    return x;
}

double erk(double* v1, int n){
    double sum = 0.0;
    for(int i = 0; i < n; ++i){
        sum += power(v1[i]);
    }
    return sqrtt(sum);
}

int main()
{
    double v1[30];
    int n = 0; 

    do{
        std::cout << "Enter n: ";
        std::cin >> n;
    }while(n < 0 || n >= 30);
    
    std::cout << "The array " << std::endl;
    for(int i = 0; i < n; ++i){
        std::cout << "elements: ";
        std::cin >> v1[i];
    }

    for(int i = 0; i < n; ++i){
        std::cout << v1[i] << " ";
    }
   
    std::cout << std::endl;
    std::cout << "Result: ";
    std::cout << erk(v1, n);
    
    return 0;
}

17)Մուտքագրել n թիվ և n-չափանի 2 վեկտորներ՝ V1, V2։ Գտնել այդ վեկտորների կազմած անկյան կոսինուսը։
#include <iostream>

double power(double num, int x){
    int tmp = num;
    for(int i = 0; i < x; ++i){
        tmp *= num;
    }
    return tmp;
}
double sqrtt(double n) {
    double x = 1.0;
    int end = 10;
    while(end) {
        x = (x + (n / x)) / 2;
        --end;
    }
    return x;
}

double mul_v(double* v1, double* v2, int n){
    double mul = 0.0;
    for(int i = 0; i < n; ++i){
        mul += v1[i] * v2[i];
    }
    return mul;
}

double erk(double* v1, int n){
    double sum = 0.0;
    for(int i = 0; i < n; ++i){
        sum += power(v1[i], 2);
    }
    return sqrtt(sum);
}

double result(double* v1, double* v2, int n){
    double cosinus = mul_v(v1, v2, n) / (erk(v1, n) * erk(v2, n));
    return cosinus;
}
int main()
{
    double v1[30];
    double v2[30];
    int n = 0; 

    do{
        std::cout << "Enter n: ";
        std::cin >> n;
    }while(n < 0 || n >= 30);
    
    std::cout << "First array " << std::endl;
    for(int i = 0; i < n; ++i){
        std::cout << "elements: ";
        std::cin >> v1[i];
    }
    std::cout << std::endl;

    std::cout << "Second array " << std::endl;
    for(int i = 0; i < n; ++i){
        std::cout << "elements: ";
        std::cin >> v2[i];
    }
    
    for(int i = 0; i < n; ++i){
        std::cout << v1[i] << " ";
    }
    
    for(int i = 0; i < n; ++i){
        std::cout << v2[i] << " ";
    }
    
    std::cout << std::endl;
    std::cout << "ankyan cos = ";
    std::cout << result(v1, v2, n);
    
    return 0;
}
