1)Տրված թվի երկուական համակարգի ներկայացման մեջ հաշվել 1-երի քանակը։
#include <iostream>
int bit_1(size_t num){
    int count = 0;
    int x = sizeof(int) * sizeof(int*);
    for(int i = 0; i < x; ++i){
        std::cout << (num & 1);
        if(num & 1){
            ++count;
        }
        num >>= 1;
    }
    std::cout << std::endl;
    return count;
}
int main()
{
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    std::cout << bit_1(num);
    return 0;
}

2rd tarberak
#include <iostream>

int bit_1(int n){
    int k = 0;
    while(n){
        if(n & 1){
            ++k;
        }
        n >>= 1;
    }
    return k;
}

int main()
{
    int num = 0;
    std::cout << "Enter tne number: ";
    std::cin >> num;
    std::cout << bit_1(num); 
    return 0;
}

2)Ստուգել թվի 1 արժեքով բիթերի քանակը կենտ է, թե զույգ
#include <iostream>
int bit_1(size_t num){
    bool x = 0;
    while(num){
        x ^= (num & 1);
        num >>= 1;
    }
    std::cout << std::endl;
    return x;
}
int main()
{
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    std::cout << bit_1(num);

    return 0;
}

RECURSIV
#include <iostream>

int bit_1(size_t num){
    if(num == 0){
        return 0;
    }
    return  (num & 1) ^ bit_1(num >> 1);
}
int main()
{
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    std::cout << bit_1(num);

    return 0;
}
3)Գրել void set(int n, int i) ֆունկցիան, որը տրված n թվի i-րդ բիթը կդարձնի 1։
#include <iostream>

void set(int n, int i){
    n |= (1 << i);
    std::cout << n;
}

int main()
{
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    set(num, 0); 

    return 0;
}
4)Գրել void flip(int n, int i), որը տրված n թվի i-րդ բիթը  կշրջի, այսինքն 1-ը կդարձնի 0, 0-ն:
#include <iostream>
void flip(int num, int i){
    num ^= (1 << i);
    std::cout << num;
}
int main()
{
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    set(num, 0); 

    return 0;
}
5)Կատարել swap գործողություն թվի i և j բիթերը տեղափոխելու համար։
#include <iostream>
void swap_bit(int& n, int i, int j){
    if((i == j) || (i < 0) || (i > (sizeof(int) * 8)) || (j < 0) || (j > (sizeof(int) * 8))){
        return;
    }
    bool a = n & (1 << i);
    bool b = n & (1 << j);
    if(a != b){
        n ^= (1 << i);
        n ^= (1 << j);
    }
    else{
        return;
    }   
}

int main()
{
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    int i = 0;
    int j = 0;
    std::cout << "Enter the i and j: ";
    std::cin >>  i >> j;
    swap_bit(num, i, j);
    std::cout << "New number: " << num;
    

    return 0;
}

6)Տպել ստացված թվի երկուական համակարգի ներկայացումը։ Օգտագործելով բիթային գործողություններ։
#include <iostream>
void binary_bit(int n){
    if(n == 0){
        return;
    }
    binary_bit(n >> 1);
    std::cout << (n & 1);
}
int main()
{
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    binary_bit(num);
    return 0;
}

7)Շրջել թվի բիթերը(reverse), օրինակ՝ 11110000 -> 00001111։
#include <iostream>
void swap_bit(int& n, int i, int j){
    if((i == j) || (i < 0) || (i > (sizeof(int) * 8)) || (j < 0) || (j > (sizeof(int) * 8))){
        return;
    }
    bool a = n & (1 << i);
    bool b = n & (1 << j);
    if(a != b){
        n ^= (1 << i);
        n ^= (1 << j);
    }
    else{
        return;
    }
}

void rev_bit(int& n, int i, int j){
    while(i < j){
        swap_bit(n, i, j);
        ++i;
        --j;
    }
}

int main()
{
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    int i = 0;
    int j = 0;
    std::cout << "Enter the i and j: ";
    std::cin >>  i >> j;
    rev_bit(num, i, j);
    std::cout << "New reversed number: " << num;
    return 0;
}

8)Ստուգել թիվը 2-ի աստիճան է, թե ոչ։
#include <iostream>

void exp_2(int n){
    if(((n - 1) & n) == 0){
        std::cout << "Yes";
    }
    else{
        std::cout << "NO";
    }
}

int main()
{
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    exp_2(num);
    return 0;
}

9)Տրված է ամբողջ թվերի զանգված, որում բոլոր էլեմենտները կրկնվում են, բացի մեկից։ 
Իրականացնել ալգորիթմ, որը կգտնի միակ էլեմենտը O(n) ժամանակում։ 
Օգտվել բիթային գործողություններից։
#include <iostream>
int find(int* arr, int size){
    int x = 0;
    for(int i = 0; i < size; ++i){
        x ^= arr[i];
    }
    return x;
}
int main()
{
    size_t size = 7;
    int arr[size] = {1, 3, 1, 3, 4, 2, 4};
    std::cout << "The number: " << find(arr, size) << std::endl;
    return 0;
}

10)Իրականացնել ֆունկցիա, որը որպես արգումենտ կստանա երկու բնական թվեր և կհաշվի դրանց գումարը։ 
Օգտագործել միայն բիթային գործողություններ։
#include <iostream>
int sum(int a, int b){
    while(b){
        int c = a & b;
        a ^= b;
        b = (c << 1);
    }
    return a;
}
int main()
{
    int a = 0; 
    int b = 0;
    std::cout << "Enter numbers: ";
    std::cin >> a >> b;
    std::cout << "Sum number: " << sum(a, b) << std::endl;
    return 0;
}
11)Իրականացնել ֆունկցիա, որը որպես արգումենտ կստանա երկու բնական թվեր և կհաշվի դրանց արտադրյալը։ 
Օգտագործել միայն բիթային գործողություններ։
#include <iostream>

int sum_bit(int a, int b){
    while(b){
        int c = (a & b);
        a ^= b;
        b = (c << 1);
    }
    return a;
}

int mul_bit(int a, int b){
    int res = 0;
    while(b){
        if(b & 1){
            res = sum_bit(res, a);
        }
        a <<= 1;
        b >>= 1;
    }
    return res;
}

int main(){
    std::cout << mul_bit(7, 4);
}

12)Տրված ամբողջ թվային զանգվածը սորտավորել Bubble Sort ալգորիթմով։


13)Տրված ամբողջ թվային զանգվածը սորտավորել Insertion Sort ալգորիթմով։
#include <iostream>
void insertion_sort(int* arr, int n){
    for(int i = 1; i < n; ++i){
        int tmp = arr[i];
        int j = i - 1;
        while(j >= 0 && arr[j] > tmp){
            arr[j + 1] = arr[j];
            --j;
        }
        arr[j + 1] = tmp;
    }
}

int main(){
    size_t size = 5;
    int arr[size] = {4, 1, 5, 8, 3};
    insertion_sort(arr, size);
    for(int i = 0; i < size; ++i){
        std::cout << arr[i] << " ";
    }
}

14)Տրված ամբողջ թվային զանգվածը սորտավորել selection Sort ալգորիթմով։
#include <iostream>

void selection_sort(int* arr, int n){
    for(int i = 0; i < n - 1; ++i){
        int ind = i;
        for(int j = i + 1; j < n; ++j){
            if(arr[j] < arr[ind]){
                ind = j;
            }
        }
        int tmp = arr[i]; 
        arr[i] = arr[ind];
        arr[ind] = tmp;
    }
}

int main()
{
    const int size = 7;
    int arr[size] = {1, 5, 9, 2, 1, 5, 4};
    selection_sort(arr, size);
    for(int i = 0; i < size; ++i){
        std::cout << arr[i] << " ";
    }
    return 0;
}

15)merge sort
#include <iostream>

void merge(int* arr, int f, int m, int e){
    int f1 = f;
    int e1 = m;
    int f2 = m + 1;
    int e2 = e;
    int s = e - f + 1;
    int* tmp = new int[s];
    int ind = 0;
    while(f1 <= e1 && f2 <= e2){
        if(arr[f1] <= arr[f2]){
            tmp[ind] = arr[f1];
            ++f1;
        }
        else{
            tmp[ind] = arr[f2];
            ++f2;
        }
        ++ind;
    }
    while(f1 <= e1){
        tmp[ind] = arr[f1];
        ++f1;
        ++ind;
    }
    while(f2 <= e2){
        tmp[ind] = arr[f2];
        ++f2;
        ++ind;
    }
    for(int i = f; i < s; ++i){
        arr[f + i] = tmp[i];
    }
    delete[] tmp;
}

void merge_sort(int* arr, int f, int e){
    if(e > f){
        int m = f + (e - f) / 2;
        merge_sort(arr, f, m);
        merge_sort(arr, m + 1, e);
        
        merge(arr, f, m, e);
    }
}


int main()
{
    int size = 0;
    std::cout << "Enter the array size: ";
    std::cin >> size;
    int* arr = new int[size];
    for(int i = 0; i < size; ++i){
        std::cout << "Enter the sorted array: ";
        std::cin >> arr[i];
    }
    
    merge_sort(arr, 0, size - 1);
    
    std::cout << "Sorted array! " << std::endl;
    for(int i = 0; i < size; ++i){
        std::cout << arr[i] << " ";
    }
    
    delete[] arr;
    
    return 0;
}

16)quick sort
#include <iostream>

int partition(int* arr, int f, int e){
    int pivot = arr[f];
    int i = f + 1;
    int j = e;
    while(i < j){
        while(arr[i] <= pivot){
            ++i;
        }
        while(arr[j] > pivot){
            --j;
        }
        if (i < j){
           std::swap(arr[i], arr[j]); 
        }
    }
    std::swap(arr[j], arr[f]);
    return j;
}

void quick_s(int* arr, int f, int e){
    if (e > f){
        int ind = partition(arr, f, e);
        quick_s(arr, f, ind - 1);
        quick_s(arr, ind + 1, e);
    }
}

int main(){
    int arr[10] = {5, 3, 1, 0, 4, 2, 1, 5, 8, 6};
    quick_s(arr, 0, 9);
    for(int i = 0; i < 10; ++i){
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;
    return 0;
}
