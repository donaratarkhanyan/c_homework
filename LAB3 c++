1)Տրված թվի երկուական համակարգի ներկայացման մեջ հաշվել 1-երի քանակը։
#include <iostream>
int bit_1(size_t num){
    int count = 0;
    int x = sizeof(int) * sizeof(int*);
    for(int i = 0; i < x; ++i){
        std::cout << (num & 1);
        if(num & 1){
            ++count;
        }
        num >>= 1;
    }
    std::cout << std::endl;
    return count;
}
int main()
{
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    std::cout << bit_1(num);
    return 0;
}

2rd tarberak
#include <iostream>

int bit_1(int n){
    int k = 0;
    while(n){
        if(n & 1){
            ++k;
        }
        n >>= 1;
    }
    return k;
}

int main()
{
    int num = 0;
    std::cout << "Enter tne number: ";
    std::cin >> num;
    std::cout << bit_1(num); 
    return 0;
}

2)Ստուգել թվի 1 արժեքով բիթերի քանակը կենտ է, թե զույգ
#include <iostream>
int bit_1(size_t num){
    bool x = 0;
    while(num){
        x ^= (num & 1);
        num >>= 1;
    }
    std::cout << std::endl;
    return x;
}
int main()
{
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    std::cout << bit_1(num);

    return 0;
}

RECURSIV
#include <iostream>

int bit_1(size_t num){
    if(num == 0){
        return 0;
    }
    return  (num & 1) ^ bit_1(num >> 1);
}
int main()
{
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    std::cout << bit_1(num);

    return 0;
}
3)Գրել void set(int n, int i) ֆունկցիան, որը տրված n թվի i-րդ բիթը կդարձնի 1։
#include <iostream>

void set(int n, int i){
    n |= (1 << i);
    std::cout << n;
}

int main()
{
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    set(num, 0); 

    return 0;
}
4)Գրել void flip(int n, int i), որը տրված n թվի i-րդ բիթը  կշրջի, այսինքն 1-ը կդարձնի 0, 0-ն:
#include <iostream>
void flip(int num, int i){
    num ^= (1 << i);
    std::cout << num;
}
int main()
{
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    set(num, 0); 

    return 0;
}
5)Կատարել swap գործողություն թվի i և j բիթերը տեղափոխելու համար։
#include <iostream>
void swap_bit(int& n, int i, int j){
    if((i == j) || (i < 0) || (i > (sizeof(int) * 8)) || (j < 0) || (j > (sizeof(int) * 8))){
        return;
    }
    bool a = n & (1 << i);
    bool b = n & (1 << j);
    if(a != b){
        n ^= (1 << i);
        n ^= (1 << j);
    }
    else{
        return;
    }   
}

int main()
{
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    int i = 0;
    int j = 0;
    std::cout << "Enter the i and j: ";
    std::cin >>  i >> j;
    swap_bit(num, i, j);
    std::cout << "New number: " << num;
    

    return 0;
}

6)Տպել ստացված թվի երկուական համակարգի ներկայացումը։ Օգտագործելով բիթային գործողություններ։
#include <iostream>
void binary_bit(int n){
    if(n == 0){
        return;
    }
    binary_bit(n >> 1);
    std::cout << (n & 1);
}
int main()
{
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    binary_bit(num);
    return 0;
}

7)Շրջել թվի բիթերը(reverse), օրինակ՝ 11110000 -> 00001111։
#include <iostream>
void swap_bit(int& n, int i, int j){
    if((i == j) || (i < 0) || (i > (sizeof(int) * 8)) || (j < 0) || (j > (sizeof(int) * 8))){
        return;
    }
    bool a = n & (1 << i);
    bool b = n & (1 << j);
    if(a != b){
        n ^= (1 << i);
        n ^= (1 << j);
    }
    else{
        return;
    }
}

void rev_bit(int& n, int i, int j){
    while(i < j){
        swap_bit(n, i, j);
        ++i;
        --j;
    }
}

int main()
{
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    int i = 0;
    int j = 0;
    std::cout << "Enter the i and j: ";
    std::cin >>  i >> j;
    rev_bit(num, i, j);
    std::cout << "New reversed number: " << num;
    return 0;
}

8)Ստուգել թիվը 2-ի աստիճան է, թե ոչ։
#include <iostream>

void exp_2(int n){
    if(((n - 1) & n) == 0){
        std::cout << "Yes";
    }
    else{
        std::cout << "NO";
    }
}

int main()
{
    int num = 0;
    std::cout << "Enter the number: ";
    std::cin >> num;
    exp_2(num);
    return 0;
}

9)Տրված է ամբողջ թվերի զանգված, որում բոլոր էլեմենտները կրկնվում են, բացի մեկից։ 
Իրականացնել ալգորիթմ, որը կգտնի միակ էլեմենտը O(n) ժամանակում։ 
Օգտվել բիթային գործողություններից։
#include <iostream>
int find(int* arr, int size){
    int x = 0;
    for(int i = 0; i < size; ++i){
        x ^= arr[i];
    }
    return x;
}
int main()
{
    size_t size = 7;
    int arr[size] = {1, 3, 1, 3, 4, 2, 4};
    std::cout << "The number: " << find(arr, size) << std::endl;
    return 0;
}

10)Tveri gumarel bitwize gorcoxutyunnerov
#include <iostream>
int sum(int a, int b){
    while(b){
        int c = a & b;
        a ^= b;
        b = (c << 1);
    }
    return a;
}
int main()
{
    int a = 0; 
    int b = 0;
    std::cout << "Enter numbers: ";
    std::cin >> a >> b;
    std::cout << "Sum number: " << sum(a, b) << std::endl;
    return 0;
}

