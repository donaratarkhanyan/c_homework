1)Գրել ծրագիր, որը որպես մուտքային տվյալ ստանում է տեքստային text.txt ֆայլ և երկու սիմվոլ՝ a և b։ 
Ծրագիրը ստեղծում է մեկ այլ ֆայլ՝ text.txt.replace անունով, որում պատճենում է առաջին ֆայլի պարունակությունը, բոլոր a սիմվոլները փոխարինելով b-ով։
#include <iostream>
#include <fstream>

void change(std::string& str){
    for(int i = 0; str[i]; ++i){
        if (str[i] == 'a'){
            str[i] = 'b';
        }
    }
}
int main(){

    std::string s1;
    std::string s2;
    std::cout << "Enter the input file: ";
    std::cin >> s1;
    std::cout << "Enter the output file: ";
    std::cin >> s2;
    
    std::ifstream f1(s1);
    std::ofstream f2(s2);
    if (!f1.is_open()){
        throw std::invalid_argument();
    }
    std::string str;
    while(std::getline(f1, str), !f1.eof()) {
        change(str);
        f2 << str << std::endl;
    }
    std::cout << std::endl;
    f1.close();
    f2.close();
    return 0;
}
2)Իրականացնել ծրագիր, որը ստանում է ֆայլ և տրամադրում տեքստի մասին վիճակագրություն՝ տողերի քանակը, բառերի քանակը և նիշերի քանակը։
#include <iostream>
#include <fstream>

int main(){

    std::string s;
    std::cout << "Enter the file name: ";
    std::cin >> s;

    int sym = 0;
    int bar = 0;
    int tox = 0;

    std::ifstream f1(s);
    std::string str;
    while(std::getline(f1, str), !f1.eof()){
        for(int i = 0; i < str.size(); ++i){
            if (str[i] != ' '){
                ++sym;
            }
            if ((str[i] != ' ' && str[i + 1] == ' ') || i == str.size() - 1){
                ++bar;
            }
        }
        ++tox;
    }
    std::cout << "Tox: " << tox << std::endl;
    std::cout << "Bar: " << bar << std::endl;
    std::cout << "Symble: " << sym << std::endl;
    return 0;
}


3)Իրականացնել ծրագիր, որը ստանում է տեքստային ֆայլ, ապակոդավորում է ֆայլի պարունակությունը և ապակոդավորած ֆայլի պարունակությունը տեղադրում է նոր ֆայլում։ 
Իրականացնել խնդիրը Caesar cipher և XOR կոդավորումների հիման վրա։
#include <iostream>
#include <fstream>

void encode(std::string& ch, int n){
    for(int i = 0; i < ch.size(); ++i){
        if(ch[i] >= 'a' && ch[i] <= 'z'){
            if (ch[i] + n > 'z'){
                ch[i] = ch[i] + n  - 26;
            } else if (ch[i] + n < 'a'){ 
                ch[i] = ch[i] + n + 26;
            } else{
                ch[i] += n;
            }
        }
        if(ch[i] >= 'A' && ch[i] <= 'Z'){
            if (ch[i] + n > 'Z'){
                ch[i] = ch[i] + n  - 26;
            } else if (ch[i] + n < 'A'){
                ch[i] = ch[i] + n + 26;
            } else{
                ch[i] += n;
            }
        }
    }
}


int main(){
    std::string s1;
    std::string s2;
    int n = 0;
    bool b;
    std::cout << "Enter input file name: ";
    std::cin >> s1;
    std::cout << "Enter output file name: ";
    std::cin >> s2;
    std::cout << "Enter key: ";
    std::cin >> n;
    std::cout << "Enter \n 1) 1 - code \n 2) 0 - decode \n: ";
    std::cin >> b;
    if (!b){
        n = -n;
        }
        n %= 26;
        std::ifstream f1(s1);
        std::ofstream f2(s2);
        std::string str;
        while(std::getline(f1, str), !f1.eof()){
            encode(str, n);
            f2 << str << std::endl;
        }
        f1.close();
        f2.close();

    return 0;
}
 XOR կոդավորումների հիման վրա։
#include <iostream>
#include <fstream>

void xorr(std::string& str, char key){
    for(int i = 0; i < str.size(); ++i){
            str[i] ^= key;
    }
}

int main(){
    std::string s1;
    std::string s2;
    int key = 0;
    bool b = false;
    std::cout << "Enter the input file name: ";
    std::cin >> s1;
    std::cout << "Enter the output file name: ";
    std::cin >> s2;
    std::cout << "Enter the key: ";
    std::cin >> key;

    std::ifstream f1(s1);
    std::ofstream f2(s2);
    std::string str;
    while(std::getline(f1, str), !f1.eof()){
        xorr(str, (char)key);
        f2 << str << std::endl;
    }
    f1.close();
    f1.close();

    return 0;
}

4)Իրականացնել ծրագիր, որը ստանում է ֆայլ և սեղմում է (compress) ֆայլի պարունակությունը օգտագործելով RLE - Run-Length Encoding ալգորիթմը։
#include <iostream>
#include <fstream>

std::string foo(std::string& str){
    std::string tmp;
    for(int i = 0; i < str.size(); ++i){
        int count = 1;
        while(i < str.size() - 1 && str[i] == str[i + 1]){
            ++count;
            ++i;
        }
        tmp += count + '0'; 
        tmp += str[i];
    }
    
    std::cout << tmp << std::endl;
    return tmp;
}

int main(){
    std::string s1;
    std::string s2;
    std::cout << "Enter the input file name: ";
    std::cin >> s1;
    std::cout << "Enter the output file name: ";
    std::cin >> s2;

    std::ifstream f1(s1);
    std::ofstream f2(s2);
    std::string str;
    while(std::getline(f1, str), !f1.eof()){
        f2 << foo(str) << std::endl;
    }
    f1.close();
    f2.close();

    return 0;
}


5)Իրականացնել ծրագիր, որը ստանում է երկու տեքստային ֆայլ և համեմատում նրանց պարունակությունը։ 
Ծրագիրը ստեղծում է նոր ֆայլ, որում տեղադրում է երկու ֆայլերի միջև տարբերությունները՝ նշելով որ տողերում;
#include <iostream>
#include <fstream>

bool equal(std::string s1, std::string s2){
    if (s1.size() != s2.size()){
        return false;
    }
    for(int i = 0; i < s1.size() || i < s2.size(); ++i){
        if(s1[i] != s2[i]){
            return false;
        }
        
    }
    return true;
}

int main(){
    std::string s1;
    std::string s2;
    std::string s3;
    std::string str1;
    std::string str2;

    std::cout << "Enter input file1: ";
    std::cin >> s1;
    std::cout << "Enter input file2: ";
    std::cin >> s2;
    std::cout << "Enter output file2: ";
    std::cin >> s3;


    std::ifstream f1(s1);
    std::ifstream f2(s2);
    std::ofstream f3(s3);

   int count = 0;
    while(std::getline(f1, str1), std::getline(f2, str2), (!f1.eof() || !f2.eof())){
            count++;
            if(!check(str1, str2)){
                f3 << "Line " << count << ": " << str1 << " | " << str2 << std::endl;
            }
        
    }
    f1.close();
    f2.close();
    f3.close();

}

6)Իրականացնել ծրագիր, որը ստանում է տեքստային ֆայլ և ֆայլում փնտրում որոշակի բառ կամ արտահայտու թյուն։ 
Վերադարձնել այն տողերի համարները, որում առկա է փնտրվող բառը կամ արտահայտությունը։

#include <iostream>
#include <fstream>

bool foo(std::string s1, std::string s2)
{
	bool flag = false;
	int tmp = 0;
	int s1_size = 0;
	int s2_size = 0;

	while(s1[s1_size] != '\0') 
	{
		++s1_size;
	}
	while(s2[s2_size] != '\0') 
	{
		++s2_size;
	}

	for(int i = 0; i < s1_size; ++i) 
	{
		tmp = i;
		for(int k = 0; k < s2_size; ++k) 
		{
			if(s1[i] != s2[k]) 
			{
				flag = false;
				i = tmp;
				break;
			}
			++i;
			flag = true;
		}
		if(flag) 
		{
			return  true;
		}
	}

	return false;	
}

int main()
{
	std::string input;
	std::string output;
	std::string word;
	std::cout << "Please enter 2 text names: ";
	std::cin >> input >> output;
	std::cout << "Please enter world: ";
	std::cin >> word;

	std::ifstream fi(input);
	std::ofstream fo(output);
	std::string str;
	int line = 0;
	while(std::getline(fi, str), !fi.eof()) {
		++line;
		if(foo(str, word))	{
			fo << line << std::endl;
		}
	}
	fi.close();
	fo.close();
}

7)Իրականացնել ֆունկցիա, որը ստանում է սորտավորված զանգված, զանգվածի չափը և թիվ՝ target։ Եթե զանգվածում առկա է երկու թիվ, որոնց գումարը հավասար է target-ին, վերադարձնել այդ թվերի ինդեքսները, հակառակ դեպքում՝ վերադարձնել {-1, -1}։ 
Ֆունկցիան իրականացնել O(n) ժամանակային բարդությամբ։ Օրինակ՝
Input: nums = [2,7,11,15], target = 9
Output: [0,1]

#include <iostream>
struct A {
    int a;
    int b;
};
void print(int*, int);
A twoSum(int*, int, int);

int main() {
    size_t size = 7;
    int arr[size] = {0, 1, 4, 7, 9, 12, 17};
    int target = 0;
    std::cout << "Enter the target element: ";
    std::cin >> target;
    print(arr, size);
    A result = twoSum(arr, size, target);
    std::cout << "Indexes: " << result.a << " " << result.b << std::endl;

    return 0;
}

void print(int* arr, int size) {
    for (int i = 0; i < size; ++i) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;
}

A twoSum(int* arr, int size, int target) {
    A ob;
    int j = size - 1;
    int i = 0;
    while (i < j) {
        int tmp = arr[i] + arr[j];
        if (tmp == target) {
            ob.a = i;
            ob.b = j;
            return ob;
        } else if (tmp < target) {
            ++i;
        } else {
            --j;
        }
    }
    ob.a = -1;
    ob.b = -1;
    return ob;
}
8)Իրականացնել ֆունցկիա, որը ստանում է թվային զանգված և նրա չափը։ Անհրաժեշտ է վերադարձնել տրված զանգվածի աստիճանը։ 
Զանգվածի աստիճան է համարվում, զանգվածում ամենաշատ կրկնություններ ունեցող էլեմենտի կրկնությունների քանակը։ Օրինակ՝
Input: nums = [1,4,4,5,1,4]
Output: 3 
Input: nums = [2,4,3,1]
Output: 1
Input: nums = [1,3,5,6,3,6]
Output: 2

#include <iostream>
void print(int*, int);
int max_count(int*, int);

int main() {
    size_t size = 8;
    int arr[size] = {1, 3, 5, 6, 3, 6, 8, 6};
    print(arr, size);
    std::cout << "Max count of elements = " << max_count(arr, size) << std::endl;
    return 0;
}

void print(int* arr, int size) {
    for (int i = 0; i < size; ++i) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;
}

int max_count(int* arr, int size){
    int max = 0;
    for(int i = 0; i < size; ++i){
        int count = 0;
        for(int j = 0; j < size; ++j){
            if(arr[i] == arr[j]){
                ++count;
            }
        }
        if(count > max){
            max = count;
        }
    }
    return max;
}
9)Իրականացնել ծրագիր, որը ստանում է տեքստային ֆայլ, որը պարունակում է էլետկտրոնային հասցեներ (mail)։ 
Ֆայլում էլեկտրոնային հասցեները դասավորված են իրար տակ, հերթականությամբ։ 
Անհրաժեշտ է հաշվել և էկրանին տպել ճիշտ ձևաչափի էլեկտրոնային հասցեների քանակը։ 
Էլեկտրոնային հասցեն համարվում է ճիշտ, եթե այն ունի հետևյալ օրինակներից որևիցե մեկի ձևաչափը։
abc_abc@mail.com
abc.abc@mail.com
abc@mail.com
Որտեղ “abc” բառի փոխարեն կարող է լինել ամենաշատը 10 երկարություն ունեցող ցանկացած տող, բաղկացած լատինական այբուբենի տառերից և թվանշաններից։ 
Էլեկտրոնային հասցեն չի կարող սկսվել թվանշանով և պարունակել այլ նիշեր, բացի օրինակում նշված ձևաչափերի ‘ . ’ և ‘_’ նիշերը։

#include <iostream>
#include <fstream>
#include <regex>
bool mail_isvalid(const std::string& str){
    std::regex mail (“^[a-zA-Z][a-zA-Z0-9]{0,9}([\\._][a-zA-Z0-9]{1,10})?@mail\\.com$“);
    return std::regex_match(str, mail);
}
int main(){
    int count = 0;
    std::string s1;
    std::string str;
    std::cout << “Enter  the input file: “;
    std::cin >> s1;
    std::ifstream f1(s1);
    std::cout << “~~~~~~~~~~~~~~~~~~~~~~~” << std::endl;
    if(!f1.is_open()){
        throw std::invalid_argument(“”);
    }
    while(std::getline(f1, str), !f1.eof()) {
        if(mail_isvalid(str)) {
            std::cout <<  “Is valid mail address!!” << std::endl;
            std::cout << str << std::endl;
            ++count;
        }
        else {
            std::cout << “Is invalid mail address!!” << std::endl;
            std::cout << str << std::endl;
        }
    }
    std::cout << “~~~~~~~~~~~~~~~~~~~~~~~” << std::endl;
    f1.close();
    std::cout << “Valid mails count = ” << count << std::endl;
    std::cout << “~~~~~~~~~~~~~~~~~~~~~~~” << std::endl;
    return 0;
}

10)Իրականացնել ծրագիր, որը ստանում է տեքստային ֆայլ, որը պարունակում է կոդավորված տեքստ հետևյալ ձևաչափով։ 
Ֆայլի տեքստը բաղկացած է լատինական տառերից և թվանշաններից։ 
Յուրաքանչյուր տառից առաջ դրված է թիվ, որը ցույց է տալիս թվանշանին հաջորդող տառի իրար հետևից կրկնությունների քանակը։ Անհրաժեշտ է ստեղծել նոր ֆայլ և այնտեղ տեղադրել մուտքային ֆայլի պարունակությունը ապակոդավորված։ Օրինակ՝
Input Text  : "2a3B1k4c"
Output Text : "aaBBBkcccc
#include <iostream>
int main()
{
    std::string s = "2s23a3e12b";
    for(int i = 0; i < s.size(); ++i){
        int x = 0;
       
        while(s[i] >= '1' && s[i] <= '9'){
            x *= 10;
     
            x += (int)s[i] - 48;
            ++i;
        }
        for(int j = 0; j < x; ++j){
            std::cout << s[i];
        }
    }
    return 0;
}
