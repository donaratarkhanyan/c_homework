1)Task1: Implement a Student Class
The class should have the following properties:
	1. studentID (int): A unique identifier for each student.
	2. name (string): The name of the student.
	3. grade (char): The grade is the overall level of achievement for a course.
	4. marks[3] (double): The average marks of the student.
	
The class should also include the following methods:
	displayInfo(): A method that displays the student's information, including student ID, name, and grade.
	calculateGrade(): A method that calculates and sets grade based on the average mark. Assume a grading system (e.g., A if marks >= 90, B if marks >= 80, and so on).

#include <iostream>

class Student{
    public:
        void setName(std::string name) {
            m_name = name;
        }
        void setMarks(double* marks) {
            for(int i = 0; i < 3; ++i){
                m_marks[i] = marks[i];
            }
            
        }
        void setId(int id) {
            m_id = id;
        }
        
        void setGrade(char grade){
            m_grade = grade;
        }
        
        std::string getName(){
            return m_name;
        }
        
        
        int getId(){
            return m_id;
        }
        
        char getGrade(){
            return m_grade;
        }
        
        void calculateGrade(){
            double mij = 0.0;
            for(int i = 0; i < 3; ++i){
                mij += m_marks[i];
            }
            mij /= 3;
            if(mij <= 5){
                m_grade = 'F';
            }
            if(mij > 5 && mij < 20){
                m_grade = 'A';
            }
        }
        
        void displayInfo(){
            std::cout << "Name: " << m_name << std::endl;
            std::cout << "Id: " << m_id << std::endl;
            std::cout << "Grade: " << m_grade << std::endl;
            std::cout << "Mij gnht: " << std::endl;
            for(int i = 0; i < 3; ++i){
                std::cout <<  m_marks[i] << " ";
            }
            std::cout << std::endl;

        }
    private:
        std::string m_name;
        double m_marks[3];
        int m_id;
        char m_grade;
};

int main
{
    Student S;
    std::string name;
    std::cout << "Name: ";
    std::cin >> name;
    S.setName(name);
    
    int id;
    std::cout << "Id: ";
    std::cin >> id;
    S.setId(id);
    
    size_t size = 3;
    double arr_d[size];
    for(int i = 0; i < size; ++i){
        arr_d[i] = rand()%9;
    }
    S.setMarks(arr_d);
    std::cout << std::endl;
    S.calculateGrade();
    S.displayInfo();
    
    
}

2)Task: Create a Simple Library Book Class
Create a C++ program that defines a simple LibraryBook class. The class should have the following attributes:
	bookID (int): A unique identifier for each book.
	title (string): The title of the book.
	author (string): The author of the book.
	isAvailable (bool): A flag indicating whether the book is currently available or checked out.
	
The class should include the following methods:
	Display Book Info: A method named displayBookInfo that displays the book information including book ID, title, author, and availability status.
	Check Out: A method named checkOut that sets isAvailable to false if the book is currently available. If the book is already checked out, print an appropriate message.
	Check In: A method named checkIn that sets isAvailable to true to indicate that the book has been returned. (edited) 

#ifndef LIBRARYBOOK_H
#define LIBRARYBOOK_H

class LibraryBook{
    public:
    void setId(int);
    void setTitle(std::string);
    void setAuther(std::string);
    void setAvailable(bool);
    void displayInfo();
    void chackOut();
    
    private:
        int m_id;
        std::string m_title;
        std::string m_auther;
        bool m_isAvailable;
};
#endif

#include <iostream>
#include "librarybook.h"

void LibraryBook::setId(int id){
    m_id = id;
}
void LibraryBook::setTitle(std::string title){
    m_title = title;
}
void LibraryBook::setAuther(std::string auther){
    m_auther = auther;
}
void LibraryBook::setAvailable(bool isavailable){
    m_isAvailable = isavailable;
}
void LibraryBook::displayInfo(){
    std::cout << "Book Id: " << m_id << std::endl;
    std::cout << "Book Title: " << m_title << std::endl;
    std::cout << "Book Auther: " << m_auther << std::endl;
    std::cout << "Is Avaliable: " << m_isAvailable << std::endl;    
}

void LibraryBook::chackOut(){
    if (m_isAvailable){
        m_isAvailable = false;
        std::cout << "Gerqy ka";
    } else {
        std::cout << "Girqy chka";
    }
    
}

int main()
{
    LibraryBook book;
    
    int id;
    std::cout << "Id: ";
    std::cin >> id;
    book.setId(id);
    
    std::string title;
    std::cout << "Title: ";
    std::cin >> title;
    book.setTitle(title);
    
    std::string auther;
    std::cout << "Auther: ";
    std::cin >> auther;
    book.setAuther(auther);

    book.setAvailable(true);
    std::cout << std::endl;
    book.displayInfo();
    book.chackOut();
    
    return 0;
}

3)Task: Creating a Bank Account Class
The class should have the following features:
Properties:
	accountNumber (integer): A unique identifier for each account.
	accountHolder (string): The name of the account holder.
	balance (double): The current balance in the account.
Methods:
	displayAccountInfo(): A method that displays the account information (account number, account holder, balance).
	deposit(double amount): A method that adds the specified amount to the account balance.
	withdraw(double amount): A method that subtracts the specified amount from the account balance, but only if the balance is sufficient. If there is not enough balance, display an error message.

#ifndef BANKACCOUNT_H
#define BANKACCOUNT_H
class BankAccount{
    public:
        void setAccountNumber(int);
        void setAccountHolder(std::string);
        void setBalance(double);
        void displayAccountInfo();
        void deposit(double amount);
        void withdraw(double amount);
        
    private:
        int m_accountNumber;
        std::string m_accountHolder;
        double m_balance;
};

#endif


#include <iostream>
#include "bank.h"

void BankAccount::setAccountNumber(int accountNumber){
    m_accountNumber = accountNumber;
}
void BankAccount::setAccountHolder(std::string accountHolder){
    m_accountHolder = accountHolder;
}
void BankAccount::setBalance(double balance){
    m_balance = balance;
}


void BankAccount::displayAccountInfo(){
    std::cout << "Account Number: " << m_accountNumber << std::endl;
    std::cout << "Account Holder: " << m_accountHolder << std::endl;
    std::cout << "Balace: " << m_balance << std::endl;
}

void BankAccount::deposit(double amount){
    m_balance += amount;
}

void BankAccount::withdraw(double amount){
    if(m_balance >= amount){
        m_balance -= amount;
    }else{
        std::cout << "There is not enough balance!" << std::endl;
    }
}

int main(){
    BankAccount bank;
    
    int accountNumber = 0;
    std::cout << "Enter Account Number: ";
    std::cin >> accountNumber;
    bank.setAccountNumber(accountNumber);
    
    std::string accountHolder;
    std::cout << "Enter Account Holder: ";
    std::cin >> accountHolder;
    bank.setAccountHolder(accountHolder);
    
    double balance = 0.0;
    std::cout << "Balance: ";
    std::cin >> balance;
    bank.setBalance(balance);
    
    double amount = 0.0;
    std::cout << "Enter the amount: ";
    std::cin >> amount;
    std::cout << std::endl;
    
    std::cout << "ACCOUNT:" << std::endl;
    bank.withdraw(amount);
    bank.displayAccountInfo();
    
    return 0;
    
}
