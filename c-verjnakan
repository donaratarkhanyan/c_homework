1.Գրեք ծրագիր, որը օգտվողին թույլ կտա մուտքագրել ամբողջ թվային զանգվածի էլեմենտների արժեքները, և տպում է դրանցից առավելագույնի արժեքը:

#include <stdio.h>
#include <stdlib.h>

int main()
{
    int size = 0;
    printf("Enter the array size: ");
    scanf("%i", &size);
    int* arr = (int*)calloc(size,sizeof(int));
    for(int i = 0; i < size; ++i){
        printf("Enter the array element: ");
        scanf("%i", &arr[i]);
    } 
    
    int max = arr[0];
    for(int i = 0; i < size; ++i){
        if(arr[i] > max){
            max = arr[i];
        }
    }
    printf("\nMax = %d",max);
    
    return 0;
}

2.Գրեք ծրագիր,  որը օգտվողին թույլ կտա մուտքագրել նույն չափսի, երկու ամբողջ թվային՝ զանգվածների էլեմենտների արժեքները և տպում է՝ համապատասխանող ինդեքսեներով էլեմնետների արտադրյալը էկրանին:
#include <stdio.h>
#include <stdlib.h>

void scan(int*, int);
void print(int*, int);


int main()
{
    int size = 0;
    printf("Enter the array size: ");
    scanf("%i", &size);
    int* arr = (int*)calloc(size, sizeof(int));
    int* arr2 = (int*)calloc(size, sizeof(int));
    
    printf("First array \n");
    scan(arr, size);
    printf("Second array \n");
    scan(arr2, size);
    
    printf("\nNEW\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i] * arr2[i]);
    }

    free(arr);
    free(arr2);
    return 0;
}

void scan(int* arr, int size){
    for(int i = 0; i < size; ++i){
        printf(" Array element: ");
        scanf("%i", &arr[i]);
    }
}

void print(int* arr, int size){
    for (int i = 0; i < size; ++i) {
        printf("%d ", arr[i]);
    }
}

}

3.Գրեք ծրագիր, որը օգտվողին թույլ կտա մուտքագրել ամբողջ թվային զանգվածի էլեմենտների արժեքները և տպում է այդ զանգավածի էլեմենտների միջին թվաբանականի արժեքը:
#include <stdio.h>
#include <stdlib.h>

int mij(int* arr, int size){
	int sum = 0;
	for(int i = 0; i < size; ++i){
		sum += arr[i];
	}
	return sum / size;
}

int main()
{
	int size = 0;
	printf("Enter the array size: ");
	scanf("%i", &size);
	int* arr = (int*) calloc (size, sizeof(int)); 
	for(int i = 0; i < size; ++i){
		printf("Enter the array element: ");
        	scanf("%i", &arr[i]);
	}
	
	printf("%i = mijin tv.\n", mij(arr, size));

	return 0;

}
7.Իրականացնել cstring գրադարանային ֆայլի կողմից տրամադրվող  strlen() ֆունկցիային համարժեք ֆունկցիա:
#include <stdio.h>
int strlen(char* str){
    int count;
    while(*(str + count) != '\0'){
        ++count;
    }
    return count;
}
int main()
{
    char str[] = "Donara";
    int size = strlen(str);
    printf("%d\n", size);
    return 0;
}
8.Իրականացնել cstring գրադարանային ֆայլի կողմից տրամադրվող  strcpy() ֆունկցիային համարժեք ֆունկցիա։
#include <stdio.h>
int strlenn(char* str){
    int count = 0;
    while(*(str + count) != '\0'){
        ++count;
    }
    return count;
}

void strcopy(char* des, char* src){
    int erkar = strlenn(src);
    for(int i = 0; i < erkar; ++i){
        des[i] = src[i];
    }
    des[erkar] = '\0';
}
int main()
{
    char str[] = "Donara";
    char str2[15];
    strcopy(str2, str);
    puts(str2);
    printf("%i\n", strlenn(str));
    return 0;
}

11)Օգտվելով դինամիկ հիշողությունից, իրականացնել ֆունկցիա,որը հաշվում և վերադարձնում է քառակուսային մատրիցի օժանդակ անկյունագծի տարրերի գումարը։


12.Իրականացրեք մի ֆունկցիա, որը որպես արգումնետ ստանալու է դինամիկ զանգվածների ցուցիչներ, զանգվածների չափերը և միավորում է երկու զանգվածները  նոր ստեղծված դինամիկ զանգվածի մեջ։ Ֆունկցիան վերադարձնելու է նոր ստեղծված զանգվածի հասցեն։
#include <stdio.h>
#include <stdlib.h>

void scan(int* arr, int size){
	for(int i = 0; i < size; ++i){
		printf("array element: ");
		scanf("%i", &arr[i]);
	}
}

int* new_arr(int* arr1, int size1, int* arr2, int size2){
	int size3 = size1 + size2;
	int* resize = (int*) calloc (size3, sizeof(int));
	for(int i = 0; i < size1; ++i){
		resize[i] = arr1[i];
	}
	int x = 0;
	for(int i = size1; i < size3; ++i){
		resize[i] = arr2[x];
		x++;
	}
	return resize;
}
int main()
{
	int size1 = 0;
	printf("Enter the first array size: ");
	scanf("%i", &size1);	
	int* arr1 = (int*) calloc (size1, sizeof(int));
	scan(arr1, size1);
	
	int size2 = 0;
	printf("Enter the second array size: ");
	scanf("%i", &size2);
        int* arr2 = (int*) calloc (size2, sizeof(int));
	scan(arr2, size2);

	int size3 = size1 + size2;
	int* n_arr = new_arr(arr1,size1, arr2, size2);
	for(int i = 0; i < size3; ++i){
		printf("%i ",n_arr[i]);

	}
	return 0;
}

13)Գրեք ծրագիր, որը ամբողջ թվային զանգվածի բոլոր կենտ թվերը լցնում է մեկ այլ զանգվածի մեջ: Ստացված զանգվածը տպել էկրանին։
#include <stdio.h>
#include <stdlib.h>
int main()
{
    int size = 0;
    printf("Enter the array size: ");
    scanf("%i", &size);
    int* arr = (int*)calloc(size, sizeof(int));
    for(int i = 0; i < size; ++i){
        printf(" Array element: ");
        scanf("%i", &arr[i]);
    }
    
    int count = 0;
    for(int i = 0; i < size; ++i){
        if(arr[i] % 2 != 0){
            ++ count;
        }
    }

    int* arr2 = (int*)calloc(count, sizeof(int));
    int k = 0;
    for(int i = 0; i < size; ++i){
        if(arr[i] % 2 != 0){
            arr2[k] = arr[i];
            k++;
        }
    }
    printf("\nNEW Array: ");
    for (int i = 0; i < count; ++i) {
        printf("%d ", arr2[i]);
    }
    free(arr);
    free(arr2);
    return 0;
}
14)Գրեք ծրագիր, որը գտնում և տպում է զանգվածի երկրորդ ամենափոքր տարրը: Այսինքն՝ տվյալ տարրը փոքր է լինելու զանգվածի բոլոր էլեմենտներից, բացառությամբ երկու էլեմենտներից (ինքը իրենից և փոքրագույնից)
#include <stdio.h>
#include <stdlib.h>
int main()
{
    int size = 0;
    printf("Enter the array size: ");
    scanf("%i", &size);
    int* arr = (int*)calloc(size, sizeof(int));
    for(int i = 0; i < size; ++i){
        printf(" Array element: ");
        scanf("%i", &arr[i]);
    }
    
    int min1 = arr[0];
    int min2 = arr[0];
    for(int i = 0; i < size; ++i){
        if(arr[i] < min1){
            min2 = min1;
            min1 = arr[i];
        }
    }
    printf(" Array second minimum element %i: ", min2);    
    
    free(arr);
    return 0;
}
16)Գրեք ֆունկցիա, որը ցուցիչների միջոցով փոխում է երկու ամբողջ թվով փոփոխականների արժեքները:
#include <stdio.h>
void swap_p(int* a, int* b){
    int tmp = *a; 
    *a = *b;
    *b = tmp;
}
int main()
{
    int a = 6;
    int b = 3;
    swap_p(&a, &b);
    printf("a = %d\n b = %d", a, b);
    
    return 0;
}

17).Իրականացնել cstring գրադարանային ֆայլի կողմից տրամադրվող  strlen() ֆունկցիային համարժեք ֆունկցիա:
#include <stdio.h>

int strlen2(char* str){
    int i = 0;
    while(str[i] != '\0'){
        ++i;
    }
    return i;
}
int main()
{
    char str[20];
    scanf("%s", str);
    printf("%d", strlen2(str));  
    return 0;
}

18.Իրականացնել cstring գրադարանային ֆայլի կողմից տրամադրվող  strcpy() ֆունկցիային համարժեք ֆունկցիա։
#include <stdio.h>
void strlen2(char* str, char* str2){
    int i = 0;
    while(str[i] != '\0'){
        str2[i] = str[i];
        ++i;
    }
}
int main()
{
    char str[20];
    char str2[30];
    scanf("%s", str);
    strlen2(str, str2);
    printf("%s", str2);
    return 0;
}

19) Իրականացնել cstring գրադարանային ֆայլի կողմից տրամադրվող  strcat() ֆունկցիային համարժեք ֆունկցիա:
#include <stdio.h>

void strlen2(char* str, char* str2){
    while(*str != '\0'){
        str = str + 1;
    }
    while(*str2 != '\0'){
        *str = *str2;
        str ++;
        str2++;
    }
    *str = '\0';
}
int main()
{
    char str[20] = "Hello ";
    char str2[30] = "world!!";
    strlen2(str, str2);
    printf("%s", str); 
    return 0;
}
20)Իրականացնել ֆունկցիա, որը սորտավորում է ամբողջ թվով զանգվածի տարրերը:
#include <stdio.h>
#include <stdlib.h>

void sort(int* arr, int size){
    for(int i = 0; i < size; ++i){
        for(int j = i + 1; j < size; ++j){
            if(arr[i] > arr[j]){ // if(arr[i] < arr[j]) mecic poqr
                int tmp = arr[i];
                arr[i] = arr[j];
                arr[j] = tmp;
            }
        }
    }
}
int main()
{
    size_t size = 5;
    int arr[size];
    for(int i = 0; i < size; ++i){
        arr[i] = rand()%9;
    }
    
    printf("original array:\n");
    for(int i = 0; i < size; ++i){
        printf("%d ", arr[i]);
    }
    
    printf("\nsorted array:\n");
    sort(arr, size);
    
    for(int i = 0; i < size; ++i){
        printf("%d ", arr[i]);
    }
    return 0;
}

21)Իրականացնել ֆունկցիա, որը տասկան թիվը վերածում է երկուականի:
#include <stdio.h>
void binnary(int n){
    int bin[32];
    int i = 0;
    if(n == 0){
        printf("Binary: 0\n");
        return;
    }
    while(n > 0){
        bin[i] = n % 2;
        n /= 2;
        ++i;
    }
    
    printf("Binary: ");
    for (int j = i - 1; j >= 0; j--) {
        printf("%d", bin[j]);
    }
}

int main()
{
    int x = 0;
    printf("enter the number: ");
    scanf("%i", &x);
    binnary(x);

    return 0;
}

22)Ստեղծեք «Car» անունով ստրուկտուրա, որը պարունակում է տեղեկատվություն մեքենայի մասին, ներառյալ դրա ապրանքանիշը (char array), մոդելը (char array) և արտադրության տարեթիվը (int):
Գրել ֆունկցիա, որը կարժեքավորի օբլեկտի էլեմենտները մասնավորապես մեքենայի ապրանքանիշը, մոդելը և  արտադրության տարեթիվը։
#include <stdio.h>
#include <stdlib.h>

struct Car{
    char name[30];
    char model[20];
    int year;
};
typedef struct Car Car;\
void scan_car(Car* p_car, int size){
    for(int i = 0; i < size; ++i){
        printf("\nEnter the car name: ");
        scanf("%s", p_car[i].name);
        printf("\nEnter the car model: ");
        scanf("%s", p_car[i].model);
        printf("\nEnter the car year: ");
        scanf("%d", &p_car[i].year);
    }
    
}
int main()
{
    int size = 0;
    printf("Enter the cars count: ");
    scanf("%i", &size);
    Car* p_car = (Car*) calloc (size, sizeof(Car));
    scan_car(p_car, size);
    
    free(p_car);
    
    return 0;
}

21)Գրեք ծրագիր, որը ամբողջ թվային զանգվածի բոլոր զույգ էլեմենտները  նույն զանգվածի մեջ՝ կտեղավորի զանգվածի սկզբից, իսկ կենտերը վերջից:
#include <stdio.h>
void scan(int* arr, int size){
    for(int i = 0; i < size; ++i){
        printf("array element: ");
        scanf("%i", &arr[i]);
    }
}

void print(int* arr, int size){
    for(int i = 0; i < size; ++i){
        printf("%d", arr[i]);
    }
    printf("\n"); 
}

int main()
{
    const int size = 5; 
    int arr[size];
    scan(arr, size);
    print(arr, size);
    
    printf("\nchanged array\n");
    int k = size - 1;
    while(arr[k] %2 == 0){
        k--;
        }
    for(int i = 0; i < k; ++i){
        if (arr[i] %2 == 0){
            int tmp = arr[i];
            arr[i] = arr[k];
            arr[k] = tmp;
            while(arr[k] % 2 == 0){
            k--;
            }
        }
    }
    print(arr, size);
    return 0;
}

22)
